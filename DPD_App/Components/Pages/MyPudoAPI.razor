@page "/MyPudoAPI"
@using System.Text.Json
@using DPD_App.Json
@inject AppState AppState

<PageTitle>MyPudoAPI</PageTitle>

<MudGrid>

    <!-- My Pudo API Key -->
    <MudItem xs="6">
        <MudStack Justify="Justify.SpaceBetween" Style="height: 100%">
            <MudPanel>
                <MudTextField Immediate="true" Value="key" T="string" Label="MyPudoAPI Key" Required="true" RequiredError="Key is required!" Variant="Variant.Outlined" TextChanged="OnKeyChanged"/>
            </MudPanel>

            <MudPanel>
                <!-- Filtering select -->
                <MudForm>
                    <MudRadioGroup Value="SelectedFiltering" T="string" ValueChanged="ChangedFilter">
                        <MudRadio Value="@("Country")" Color="Color.Primary">Country</MudRadio>
                        <MudRadio Value="@("Point ID")" Color="Color.Primary">Point ID</MudRadio>
                        <MudRadio Value="@("Address")" Color="Color.Primary">Address</MudRadio>
                        <MudRadio Value="@("Geolocation")" Color="Color.Primary">Geolocation</MudRadio>
                    </MudRadioGroup>
                </MudForm>

                <MudStack>
                    @switch (SelectedFiltering)
                    {
                        case "Country":
                            <MudItem xs="6">
                                <MudSelect T="Country" Value="SelectedCountry" Label="Select country" ValueChanged="OnCountrySelect" Variant="Variant.Outlined">
                                    @foreach (Country item in Globals.Countries)
                                    {
                                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            break;

                        case "Point ID":
                            <MudItem xs="6">
                                <MudTextField Immediate="true" T="string" Value="@PointID" Label="Point ID" Variant="Variant.Outlined" ValueChanged="OnPointIDSelect"/>
                            </MudItem>
                            break;

                        case "Address":
                            <MudItem xs="6">
                                <MudTextField Immediate="true" T="string" Value="City" Label="City" Variant="Variant.Outlined" ValueChanged="OnAddressSelectCity"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Immediate="true" T="string" Value="ZipCode" Label="Zip Code" Variant="Variant.Outlined" ValueChanged="OnAddressSelectZipCode"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudSlider Immediate="true" T="int" Size="Size.Large" Value="MaxPudoNumberValue" Min="1" Max="25" Step="1" Color="Color.Primary" ValueChanged="MaxPudoNumberValueChanged">Value: @MaxPudoNumberValue.ToString()</MudSlider>
                            </MudItem>
                            break;

                        case "Geolocation":
                            <MudItem xs="6">
                                <MudTextField Immediate="true" T="string" Value="Latitude" Label="Latitude" Variant="Variant.Outlined" ValueChanged="OnGeolocationSelectLatitude"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Immediate="true" T="string" Value="Longitude" Label="Longitude" Variant="Variant.Outlined" ValueChanged="OnGeolocationSelectLongitude"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudSlider Immediate="true" T="decimal" Size="Size.Large" Value="Distance" Min="100" Max="50000" Color="Color.Primary" ValueChanged="OnGeolocationSelectDistance">Value: @Distance.ToString()</MudSlider>
                            </MudItem>
                            break;
                    }
                </MudStack>
            </MudPanel>
        </MudStack>
    </MudItem>

    <!-- Filters -->
    <MudItem xs="6">
        <MudStack>
            <MudPanel>
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudSwitch T="bool" Value="DateFrom" ThumbIcon="@(DateFrom == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(DateFrom == true ? Color.Success : Color.Error)" ValueChanged="DateFromChanged">Date from</MudSwitch>
                    </MudItem>
                    <MudItem>
                        @if (DateFrom)
                        {
                            <MudTextField Value="DateFromValue" T="DateTime?" Format="yyyy-MM-dd" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Date" InputType="InputType.Date" ValueChanged="DateFromValueChanged"/>
                        }
                    </MudItem>
                </MudGrid>
            </MudPanel>

            <MudPanel>
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudSwitch T="bool" Value="HolidayTolerant" ThumbIcon="@(HolidayTolerant == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(HolidayTolerant == true ? Color.Success : Color.Error)" ValueChanged="HolidayTolerantChanged">Holiday</MudSwitch>
                    </MudItem>
                    <MudItem>
                    @if (HolidayTolerant)
                    {
                        <MudSelect Value="HolidayTolerantValue" T="int" Label="HolidayTolerant" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ValueChanged="HolidayTolerantValueChanged">
                            <MudSelectItem T="int" Value="0"/>
                            <MudSelectItem T="int" Value="1"/>
                            <MudSelectItem T="int" Value="2"/>
                            <MudSelectItem T="int" Value="3"/>
                        </MudSelect>
                    }
                    </MudItem>
                </MudGrid>
            </MudPanel>

            <MudPanel>
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudSwitch T="bool" Value="ServicePudoDisplay" ThumbIcon="@(ServicePudoDisplay == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(ServicePudoDisplay == true ? Color.Success : Color.Error)" ValueChanged="ServicePudoDisplayChanged">Display service codes</MudSwitch>
                    </MudItem>
                </MudGrid>
            </MudPanel>

            <MudPanel>
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudSwitch T="bool" Value="Partner" ThumbIcon="@(Partner == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(Partner == true ? Color.Success : Color.Error)" ValueChanged="PartnerChanged">Partner</MudSwitch>
                    </MudItem>
                    <MudItem>
                        @if (Partner)
                        {
                            <MudTextField Immediate="true" Value="PartnerValue" T="string" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Partner name" ValueChanged="PartnerValueChanged"/>
                        }
                    </MudItem>
                </MudGrid>
            </MudPanel>
            
        </MudStack>
    </MudItem>
    
    <!-- Query text -->
    
    <MudItem xs="12">
        <MudPanel Margin="mt-4">
            <MudStack Row="true">
                <MudButton Disabled="CanSend()" Class="px-8 mb-1 mt-2" Size="Size.Large" IconSize="Size.Large" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendRequest">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Medium" Indeterminate="true"/>
                        <MudText Typo="Typo.h5" Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h5">Send</MudText>
                    }
                </MudButton>
                <MudTextField @ref="Query" T="string" Value="PudoLink" Label="Query" Variant="Variant.Outlined"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Api" OnAdornmentClick="@(() => Query.SelectAsync())"/>
            </MudStack>
        </MudPanel>
    </MudItem>
    
    

    <MudItem xs="12">
        @if (Errors.Count == 0)
        {
            <MudDataGrid @ref="DataGrid" T="PudoItem" VirtualizeServerData="ServerDataFunc"
                         ShowFilterIcons="false" Virtualize="true" Dense="true" Filterable ReadOnly="true"
                         FixedHeader Height="500px" Class="mb-10" Hover="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu">
                <Columns>
                    <HierarchyColumn T="PudoItem"/>
                    <PropertyColumn Property="x => x.active"/>
                    <PropertyColumn Property="x => x.overloaded"/>
                    <PropertyColumn Property="x => x.pudoId"/>
                    <PropertyColumn Property="x => x.pudoType"/>
                    <!-- <PropertyColumn Property="x => x.pudoTypeInfo"/> -->
                    <PropertyColumn Property="x => x.name"/>
                    <PropertyColumn Property="x => x.language"/>
                    <PropertyColumn Property="x => x.address1"/>
                    <!-- <PropertyColumn Property="x => x.locationHint"/> -->
                    <PropertyColumn Property="x => x.zipCode"/>
                    <PropertyColumn Property="x => x.city"/>
                    <PropertyColumn Property="x => x.country"/>
                    <PropertyColumn Property="x => x.longitude"/>
                    <PropertyColumn Property="x => x.latitude"/>
                    <PropertyColumn Property="x => x.parking"/>
                </Columns>
                <RowLoadingContent>
                    <tr class="mud-table-row">
                        <td class="mud-table-cell" colspan="1000">
                            Loading...
                        </td>
                    </tr>
                </RowLoadingContent>
                <ChildRowContent>
                    <MudCard Elevation="3">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Details for @context.Item.pudoId</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Row="true">
                                <MudPaper Class="pa-2">
                                    <MudText>Pudo type Info: @context.Item.pudoTypeInfo</MudText>
                                    <MudText>Location hint: @context.Item.locationHint</MudText>
                                    <MudText>parking space: @context.Item.parking</MudText>
                                    <MudText>Handicap accessible: @context.Item.handicape</MudText>
                                </MudPaper>
                                <MudTable Items="context.Item.openingHoursItems" Context="OpeningHours" Hover="true" Breakpoint="Breakpoint.Sm">
                                    <HeaderContent>
                                        <MudTh>Day</MudTh>
                                        <MudTh>Opening time</MudTh>
                                        <MudTh>Closing time</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Day">@OpeningHours.dayId</MudTd>
                                        <MudTd DataLabel="Opening hour">@OpeningHours.startTm</MudTd>
                                        <MudTd DataLabel="Closing hour">@OpeningHours.endTm</MudTd>
                                    </RowTemplate>
                                </MudTable>
                                <MudTable Items="context.Item.holidayItems" Context="OpeningHours" Hover="true" Breakpoint="Breakpoint.Sm">
                                    <HeaderContent>
                                        <MudTh>Holiday start</MudTh>
                                        <MudTh>Holiday end</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Opening hour">@OpeningHours.startTm</MudTd>
                                        <MudTd DataLabel="Closing hour">@OpeningHours.endTm</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </ChildRowContent>
                <PagerContent>
                    <MudDivider/>
                    <MudText Typo="Typo.h6" Class="pa-1 pl-3">Number of points: @PudoItems.Count</MudText>
                </PagerContent>
            </MudDataGrid>
        }
        else
        {
            <ErrorsList Errors="Errors"/>
        }
    </MudItem>
    
</MudGrid>

@code {
    [CascadingParameter]
    public Profile CurrentProfile { get; set; }

    public List<PudoItem> PudoItems
    {
        get => AppState.MyPudoApiState.PudoItems;
        set => AppState.MyPudoApiState.PudoItems = value;
    }

    private MudTextField<string>? Query;
    private MudDataGrid<PudoItem> DataGrid;
    bool _processing;
    private string? key;

    public List<SoapError> Errors
    {
        get => AppState.MyPudoApiState.Errors;
        set => AppState.MyPudoApiState.Errors = value;
    }

    private string? PudoLink
    {
        get => AppState.MyPudoApiState.PudoLink;
        set => AppState.MyPudoApiState.PudoLink = value;
    }

    private Country? SelectedCountry
    {
        get => AppState.MyPudoApiState.SelectedCountry;
        set => AppState.MyPudoApiState.SelectedCountry = value;
    }

    public string? PointID
    {
        get => AppState.MyPudoApiState.PointID;
        set => AppState.MyPudoApiState.PointID = value;
    }

    public string? Response
    {
        get => AppState.MyPudoApiState.response;
        set => AppState.MyPudoApiState.response = value;
    }

    public string? SelectedFiltering
    {
        get => AppState.MyPudoApiState.SelectedFiltering;
        set => AppState.MyPudoApiState.SelectedFiltering = value;
    }

    public string? City
    {
        get => AppState.MyPudoApiState.City;
        set => AppState.MyPudoApiState.City = value;
    }

    public string? ZipCode
    {
        get => AppState.MyPudoApiState.ZipCode;
        set => AppState.MyPudoApiState.ZipCode = value;
    }

    public int MaxPudoNumberValue
    {
        get => AppState.MyPudoApiState.maxPudoNumberValue;
        set => AppState.MyPudoApiState.maxPudoNumberValue = value;
    }

    public string? Latitude
    {
        get => AppState.MyPudoApiState.Latitude;
        set => AppState.MyPudoApiState.Latitude = value;
    }

    public string? Longitude
    {
        get => AppState.MyPudoApiState.Longitude;
        set => AppState.MyPudoApiState.Longitude = value;
    }

    public decimal Distance
    {
        get => AppState.MyPudoApiState.Distance;
        set => AppState.MyPudoApiState.Distance = value;
    }

    public bool Partner
    {
        get => AppState.MyPudoApiState.partner;
        set => AppState.MyPudoApiState.partner = value;
    }

    public bool ServicePudoDisplay
    {
        get => AppState.MyPudoApiState.servicePudoDisplay;
        set => AppState.MyPudoApiState.servicePudoDisplay = value;
    }

    public bool HolidayTolerant
    {
        get => AppState.MyPudoApiState.holidayTolerant;
        set => AppState.MyPudoApiState.holidayTolerant = value;
    }

    public bool DateFrom
    {
        get => AppState.MyPudoApiState.dateFrom;
        set => AppState.MyPudoApiState.dateFrom = value;
    }

    public string? PartnerValue
    {
        get => AppState.MyPudoApiState.partnerValue;
        set => AppState.MyPudoApiState.partnerValue = value;
    }

    public int HolidayTolerantValue
    {
        get => AppState.MyPudoApiState.holidayTolerantValue;
        set => AppState.MyPudoApiState.holidayTolerantValue = value;
    }

    public DateTime? DateFromValue
    {
        get => AppState.MyPudoApiState.dateFromValue;
        set => AppState.MyPudoApiState.dateFromValue = value;
    }
    
    protected override Task OnInitializedAsync()
    {
        SelectedCountry = Globals.Countries[0];
        key = CurrentProfile.PudoKey;
        AppState.CurrentPage = "MyPudoAPI";
        return base.OnInitializedAsync();
    }

    private void OnKeyChanged(string obj)
    {
        key = obj;
        UpdateQuery();
    }
    
    private void ChangedFilter(string obj)
    {
        SelectedFiltering = obj;
        UpdateQuery();
    }

    //Query By country
    private void OnCountrySelect(Country obj)
    {
        SelectedCountry = obj;
        UpdateQuery();
    }
    
    //Query By Point ID
    private void OnPointIDSelect(string pointID)
    {
        PointID = pointID;
        UpdateQuery();
    }
    
    //Query By Address
    private void OnAddressSelectZipCode(string zipCode)
    {
        ZipCode = zipCode;
        UpdateQuery();
    }
    private void OnAddressSelectCity(string city)
    {
        City = city;
        UpdateQuery();
    }
    private void MaxPudoNumberValueChanged(int obj)
    {
        MaxPudoNumberValue = obj;
        UpdateQuery();
    }

    
    //Query By Geolocation
    private void OnGeolocationSelectLatitude(string latitude)
    {
        Latitude = latitude;
        UpdateQuery();
    }
    private void OnGeolocationSelectLongitude(string longitude)
    {
        Longitude = longitude;
        UpdateQuery();
    }
    private void OnGeolocationSelectDistance(decimal distance)
    {
        Distance = distance;
        UpdateQuery();
    }

    
    //Filters
    private void DateFromChanged(bool obj)
    {
        DateFrom = obj;
        UpdateQuery();
    }

    private void HolidayTolerantChanged(bool obj)
    {
        HolidayTolerant = obj;
        UpdateQuery();
    }

    private void ServicePudoDisplayChanged(bool obj)
    {
        ServicePudoDisplay = obj;
        UpdateQuery();
    }

    private void PartnerChanged(bool obj)
    {
        Partner = obj;
        UpdateQuery();
    }
    
    //Values changed
    private void HolidayTolerantValueChanged(int obj)
    {
        HolidayTolerantValue = obj;
        UpdateQuery();
    }

    private void DateFromValueChanged(DateTime? obj)
    {
        DateFromValue = obj;
        UpdateQuery();
    }

    private void PartnerValueChanged(string obj)
    {
        PartnerValue = obj;
        UpdateQuery();
    }
    
    //Send request
    private async void SendRequest()
    {
        _processing = true;
        Errors.Clear();
        PudoItems.Clear();
        Response = await NetworkService.SendHttpRequest(PudoLink);
        //repsonseShow = new MarkupString(response);
        var myDeserializedClass = JsonSerializer.Deserialize<Root>(Response);
        //If data is available load data
        if(myDeserializedClass.code is not null)
        {
            Errors.Add(new SoapError("Error code: " + myDeserializedClass.code, myDeserializedClass.message));
        }
        else if (myDeserializedClass.errors.Count > 0)
        {
            foreach (var error in myDeserializedClass.errors)
            {
                Errors.Add(new SoapError("Error code: " + error.subcode, error.userMessage));
            }
        }
        else
        {
            PudoItems = myDeserializedClass.pudoItems;
            DataGrid.ReloadServerData();
        }
        _processing = false;
        StateHasChanged();
    }

    private void UpdateQuery()
    {
        var str = "https://mypudo.dpd.com.pl/api/v2/pudo/";
        
        @switch (SelectedFiltering)
        {
            case "Country":
                str += $"list/bycountry?countryCode={SelectedCountry.IsoCodeA3}";
                break;
            
            case "Point ID":
                str += $"details?pudoId={PointID}";
                break;
            
            case "Address":
                str += $"list/byaddress?requestID=zap001&city={City}&zipCode={ZipCode}&maxPudoNumber={MaxPudoNumberValue}";
                break;
            
            case "Geolocation":
                str += $"list/bylonglat?requestID=zap001&latitude={Latitude}&longitude={Longitude}&maxDistanceSearch={Distance}";
                break;
        }
        
        if (key is not null)
        {
            str += $"&key={key}";
        }
        
        if (DateFrom)
        {
            str += "&dateFrom=" + DateFromValue?.ToString("dd/MM/yyyy");
        }
        if (HolidayTolerant)
        {
            str += "&holidayTolerant=" + HolidayTolerantValue;
        }
        if (ServicePudoDisplay)
        {
            str += "&servicePudoDisplay=1";
        }
        if (Partner)
        {
            str += "&partner=" + PartnerValue;
        }

        PudoLink = str;
        StateHasChanged();
    }
    
    private async Task<GridData<PudoItem>> ServerDataFunc(GridStateVirtualize<PudoItem> gridState, CancellationToken token)
    {
        try
        {
            var result = PudoItems;

            if (gridState.SortDefinitions.Count > 0) 
            {
                var firstSort = gridState.SortDefinitions.First();
                result = firstSort.Descending 
                    ? result.OrderByDescending(firstSort.SortFunc).ToList() 
                    : result.OrderBy(firstSort.SortFunc).ToList();
            }

            if (gridState.FilterDefinitions.Any())
            {
                var filterFunctions = gridState.FilterDefinitions.Select(x => x.GenerateFilterFunction());
                result = result
                    .Where(x => filterFunctions.All(f => f(x)))
                    .ToList();
            }

            var totalNumberOfFilteredItems = result.Count;
            
            result = result
                .Skip(gridState.StartIndex)
                .Take(gridState.Count)
                .ToList();

            return new GridData<PudoItem>
            {
                Items = result,
                TotalItems = totalNumberOfFilteredItems
            };
        }
        catch (TaskCanceledException)
        {
            return new GridData<PudoItem>
            {
                Items = [],
                TotalItems = 0
            };
        }
    }

    bool CanSend()
    {
        return key.Length <= 0;
    }
    //TODO Refactoring kodu
    //TODO Rozmiary kolumn

}