@page "/{HostName}/Compare"
@inject IJSRuntime jsRuntime
@inject AppState AppState
@inject AuthService AuthService

@code
{
    [Parameter] public string HostName { get; set; }
    protected override Task OnInitializedAsync()
    {
        AuthService.AuthHostname(HostName);
        AppState.CurrentPage = "Compare Text";
        return base.OnInitializedAsync();
    }
}

<Style>
    .my-comparer-class {
        height: 700px;
    }
</Style>

<PageTitle>Compare Text</PageTitle>

<MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-4">
    <h1 class="pa-1 pb-3">Compare Text</h1>
    
    <MudPanel>
        <MudStack Row="true" Spacing="5">
            <MudIconButton Class="px-2" Icon="@Icons.Material.Filled.SwapHoriz" Color="Color.Primary" OnClick="SwapText" Variant="Variant.Filled" Size="Size.Large"/>
            <MudIconButton Disabled="@_refreshing" Class="px-2" Icon="@Icons.Material.Filled.Refresh" Color="Color.Error" OnClick="RefreshData" Variant="Variant.Filled" Size="Size.Large"/>
        </MudStack>
    </MudPanel>
</MudStack>

<MudPanel>
    <StandaloneDiffEditor @ref="_diffEditor" CssClass="my-comparer-class" Id="sample-diff-editor-123" ConstructionOptions="DiffEditorConstructionOptions" OnDidInit="EditorOnDidInit"/>
</MudPanel>
@code {
    private StandaloneDiffEditor _diffEditor = null!;
    private bool _refreshing;

    private TextModel? OriginalModel
    {
        get => AppState.CompareState.OriginalModel;
        set => AppState.CompareState.OriginalModel = value;
    }

    private TextModel? ModifiedModel
    {
        get => AppState.CompareState.ModifiedModel;
        set => AppState.CompareState.ModifiedModel = value;
    }

    private StandaloneDiffEditorConstructionOptions DiffEditorConstructionOptions(StandaloneDiffEditor editor)
    {
        return new StandaloneDiffEditorConstructionOptions
        {
            OriginalEditable = true,
            ScrollBeyondLastLine = false,
        };
    }
    
    private async Task EditorOnDidInit()
    {
        // Get or create the original model
        if (OriginalModel == null)
        {
            var original_value = "";
            OriginalModel = await BlazorMonaco.Editor.Global.CreateModel(jsRuntime, original_value, "javascript", "sample-diff-editor-originalModel");
        }

        // Get or create the modified model
        if (ModifiedModel == null)
        {
            var modified_value = "";
            ModifiedModel = await BlazorMonaco.Editor.Global.CreateModel(jsRuntime, modified_value, "javascript", "sample-diff-editor-modifiedModel");
        }

        // Set the editor model
        await _diffEditor.SetModel(new DiffEditorModel
        {
            Original = OriginalModel,
            Modified = ModifiedModel
        });
    }
    
    private void RefreshData()
    {
        _refreshing = true;
        ModifiedModel?.SetValue("");
        OriginalModel?.SetValue("");
        _refreshing = false;
        StateHasChanged();
    }

    private async void SwapText()
    {
        var temp = _diffEditor.OriginalEditor.GetValue();
        OriginalModel?.SetValue(await _diffEditor.ModifiedEditor.GetValue());
        ModifiedModel?.SetValue(await temp);
        StateHasChanged();
    }
    
    

}
