@page "/{HostName}/GenerateLabels"
@using System.Text.RegularExpressions
@using DPD_App.Models
@inject AppState AppState
@inject AuthService AuthService

@code
{
    [Parameter] public string HostName { get; set; }
    protected override Task OnInitializedAsync()
    {
        AuthService.AuthHostname(HostName);
        AppState.CurrentPage = "Generate Labels";
        return base.OnInitializedAsync();
    }
}

<PageTitle>GenerateLabels</PageTitle>

<MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-4">
    <h1 class="pa-1 pb-2">Generate Labels</h1>
    <MudStack Row="true">
        <MudTabs Elevation="2" Rounded="true" @bind-ActivePanelIndex="ActiveMode">
            <MudTabPanel Text="Simple" />
            <MudTabPanel Text="Extended" />
        </MudTabs>
        <MudIconButton Disabled="@_refreshing" Class="mb-2 px-2" Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="RefreshData" Variant="Variant.Filled" Size="Size.Large">
        </MudIconButton>
    </MudStack>
</MudStack>

<MudGrid @onkeydown="OnEnter">
<MudItem xs="12">
    <MudPanel>
        <MudStack Row="true">
            <MudTextField T="string" Value="_profileFromTextBoxes.Login" Label="Login" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="LoginChanged" Immediate="true"></MudTextField>
            <MudTextField @bind-Value="_profileFromTextBoxes.Password" T="string" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="_profileFromTextBoxes.MasterFid" T="string" Label="MasterFid" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="_profileFromTextBoxes.FID" T="string" Label="Fid" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudSelect @ref="EnviromentField" @bind-Value="_profileFromTextBoxes.WsdlAddress" T="WsdlAddress" Label="Select enviroment">
                @foreach (var wsdlAddres in Globals.WsdlAddresses)
                {
                    <MudSelectItem Value="wsdlAddres">@wsdlAddres.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </MudPanel>
</MudItem>

    <MudDivider Class="mt-6 mx-4"/>
    
    <!-- Extended mode -->
    @if (ActiveMode == 1)
    {
        <MudItem xs="9">
            <CascadingValue Value="this">
                <AddressDetails package="Package"/>
            </CascadingValue>
        </MudItem>

        <MudItem xs="3">
            <MudStack Row="true" Class="mb-4" Spacing="2">
                <MudText Typo="Typo.h5">Services</MudText>
                <MudToggleIconButton Size="Size.Small" @bind-Toggled="ServicesOn"
                                     Icon="@Icons.Material.Filled.ArrowDownward" ToggledIcon="@Icons.Material.Filled.ArrowUpward"/>
            </MudStack>
            <!-- Services -->
            @if (ServicesOn)
            {
                <MudPanel>
                    <MudGrid Class="pa-0">
                        <MudItem xs="6">
                            <MudStack Spacing="0">
                                <!-- Krajowa = international -->
                                <MudTooltip Arrow="true" Text="<cud/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.cud" Label="Return shipment" Disabled="Package.International"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<rod/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.rod" Label="Return documents" Disabled="Package.International"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<inPers/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.inPers" Label="Delivery to a dedicated person" Disabled="Package.International || Package.Services.dpdPickup"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<privPers/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.privPers" Label="B2C consignment" Disabled="Package.Services.dpdPickup"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<dpdExpress/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.dpdExpress" Label="Air delivery" Disabled="!Package.International || Package.Services.pallet"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<pallet/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.pallet" Label="International pallet" Disabled="!Package.International || Package.Services.dpdExpress || Package.Services.tiresExport"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<dox/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.dox" Label="Letter shipment" Disabled="Package.International || Package.Services.dpdLQ || Package.Services.tires || Package.Services.dpdFood || Package.Services.carryIn"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<dpdLQ/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" Value="@Package.Services.dpdLQ" Label="Shipment of dangerous goods" ValueChanged="DpdLq" Disabled="Package.Services.dox || Package.Services.tires || Package.Services.dpdFood"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<tires/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.tires" Label="Domestic tires" Disabled="@(Package.International || Package.Services.dpdLQ || Package.Services.dox || Package.Services.dpdPickup || Package.Services.dpdFood || Package.Services.Guarantee.type == "TIME0930" || Package.Services.Guarantee.type == "TIME1200" || Package.Services.Guarantee.type == "TIMEFIXED" || Package.Services.Guarantee.type == "B2C" || Package.Services.Guarantee.type == "DPDNEXTDAY" || Package.Services.Guarantee.type == "DPDTODAY")" />
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<tiresExport/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.tiresExport" Label="Foreign tyres" Disabled="!Package.International || Package.Services.dpdExpress"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<digitalLabel/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.digitalLabel" Label="Send Parcel without a label" Disabled="Package.International || Package.Services.carryIn"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<pudoToSend/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.pudoToSend" Label="Sending a parcel at Pickup point" Disabled="Package.International || Package.Services.carryIn"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<carryIn/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.carryIn" Label="Carry-in" Disabled="Package.International || Package.Services.dox || Package.Services.pudoToSend || Package.Services.digitalLabel || Package.Services.selfCol || Package.Services.dpdPickup"/>
                                </MudTooltip>
                            </MudStack>
                        </MudItem>
                        
                        <MudItem xs="6">
                            <MudStack Spacing="0">
                                <MudTooltip Arrow="true" Text="<pudoToSend/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.declaredValue" Label="Declared value"/>
                                </MudTooltip>
                                @if (Package.Services.declaredValue)
                                {
                                    <MudSelect T="Currency" @bind-Value="@Package.Services.DeclaredValue.currency" Label="Currency" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        @foreach (var currency in Globals.Currencies.Where(c => c.IsDeclaredAmount))
                                        {
                                            <MudSelectItem Value="@currency">@currency.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTextField Label="Amount" @bind-Value="@Package.Services.DeclaredValue.amount" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                }

                                <MudTooltip Arrow="true" Text="<cod/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.cod" Label="Cash on delivery (COD)"/>
                                </MudTooltip>
                                @if (Package.Services.cod)
                                {
                                    <MudSelect T="Currency" @bind-Value="@Package.Services.Cod.currency" Label="Currency" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        @foreach (var currency in Globals.Currencies.Where(c => c.IsCod))
                                        {
                                            <MudSelectItem Value="@currency">@currency.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTextField Label="Cash amount" @bind-Value="@Package.Services.Cod.amount" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                }

                                <MudTooltip Arrow="true" Text="<dpdPickup/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.dpdPickup" Label="Delivery to the Pickup Point" Disabled="Package.Services.tires || Package.Services.privPers || Package.Services.inPers || Package.Services.guarantee || Package.Services.dpdFood || Package.Services.selfCol || Package.Services.carryIn"/>
                                </MudTooltip>
                                @if (Package.Services.dpdPickup)
                                {
                                    <MudTextField Label="Point ID" @bind-Value="@Package.Services.DpdPickup.pudo" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                    <MapPopup Profile="@CurrentProfile" Package="@Package" />
                                }

                                <MudTooltip Arrow="true" Text="<duty/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.duty" Label="Customs clearance service" Disabled="!Package.International"/>
                                </MudTooltip>
                                @if (Package.Services.duty)
                                {
                                    <MudSelect T="Currency" @bind-Value="@Package.Services.Duty.currency" Label="Currency" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        @foreach (var currency in Globals.Currencies.Where(c => c.IsDuty))
                                        {
                                            <MudSelectItem Value="@currency">@currency.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTextField Label="Cash amount" @bind-Value="@Package.Services.Duty.amount" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                }

                                <MudTooltip Arrow="true" Text="<selfCol/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.selfCol" Label="Personal collection" Disabled="Package.International || Package.Services.carryIn || Package.Services.dpdPickup"/>
                                </MudTooltip>
                                @if (Package.Services.selfCol)
                                {
                                    <MudSelect T="string" @bind-Value="@Package.Services.SelfCol.receiver" Label="Receiver" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true">
                                        <MudSelectItem T="string" Value="@("PRIV")">Private</MudSelectItem>
                                        <MudSelectItem T="string" Value="@("COMP")">Company</MudSelectItem>
                                    </MudSelect>
                                }

                                <MudTooltip Arrow="true" Text="<dpdFood/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.dpdFood" Label="Food delivery" Disabled="Package.International || Package.Services.tires || Package.Services.dox || Package.Services.dpdLQ || Package.Services.dpdPickup"/>
                                </MudTooltip>
                                @if (Package.Services.dpdFood)
                                {
                                    <MudTextField @bind-Value="@Package.Services.DpdFood.limitDate" T="DateTime" Format="yyyy-MM-dd" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Limit Date" InputType="InputType.Date"/>
                                }

                                <MudTooltip Arrow="true" Text="<guarentee/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@Package.Services.guarantee" Label="Guarantee" Disabled="Package.Services.dpdPickup"/>
                                </MudTooltip>
                                @if (Package.Services.guarantee)
                                {
                                    <MudSelect T="string" @bind-Value="@Package.Services.Guarantee.type" Label="Type" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        <MudSelectItem Value="@("TIME0930")" Disabled="Package.International || Package.Services.tires">Delivery at 9:30</MudSelectItem>
                                        <MudSelectItem Value="@("TIME1200")" Disabled="Package.International || Package.Services.tires">Delivery at 12:00</MudSelectItem>
                                        <MudSelectItem Value="@("SATURDAY")" Disabled="Package.International">Delivery on saturday</MudSelectItem>
                                        <MudSelectItem Value="@("TIMEFIXED")" Disabled="Package.International || Package.Services.tires">Delivery at given hour</MudSelectItem>
                                        <MudSelectItem Value="@("B2C")" Disabled="Package.International || Package.Services.tires">Bussiness to customer</MudSelectItem>
                                        <MudSelectItem Value="@("DPDNEXTDAY")" Disabled="Package.International || Package.Services.tires">Delivery next day</MudSelectItem>
                                        <MudSelectItem Value="@("DPDTODAY")" Disabled="Package.International || Package.Services.tires || Package.Services.carryIn">Delivery Today</MudSelectItem>
                                        <MudSelectItem Value="@("INTER")" Disabled="!Package.International">International Guarantee</MudSelectItem>
                                    </MudSelect>
                                    @if (Package.Services.Guarantee.type is not null && (Package.Services.Guarantee.type == "B2C" || Package.Services.Guarantee.type == "TIMEFIXED"))
                                    {
                                        <MudTextField @bind-Value="@Package.Services.Guarantee.value" T="string" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Time of delivery"/>
                                    }
                                }
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudPanel>
            }
        </MudItem>

        <MudDivider Class="mt-4 mx-4"/>
        <MudItem xs="3">
            <MudStack Row="true" Class="mb-4" Spacing="2">
                <MudText Typo="Typo.h5" Class="mb-2">Additional details</MudText>
                <MudToggleIconButton Size="Size.Small" @bind-Toggled="DetailsOn"
                                     Icon="@Icons.Material.Filled.ArrowDownward" ToggledIcon="@Icons.Material.Filled.ArrowUpward"/>
            </MudStack>
            @if (DetailsOn)
            {
                <MudPanel>
                    <MudStack>
                        <MudTextField Margin="Margin.Dense" @bind-Value="Package.Ref1" Label="ref1" Variant="Variant.Outlined"/>
                        <MudTextField Margin="Margin.Dense" @bind-Value="Package.Ref2" Label="ref2" Variant="Variant.Outlined"/>
                        <MudTextField Margin="Margin.Dense" @bind-Value="Package.Ref3" Label="ref3" Variant="Variant.Outlined"/>
                    </MudStack>
                </MudPanel>
            }
        </MudItem>
        
        <MudItem xs="9">
            <MudStack Row="true" Class="mb-4" Spacing="2">
                <MudText Typo="Typo.h5" Class="mb-2">Parcels</MudText>
                <MudToggleIconButton Size="Size.Small" @bind-Toggled="ParcelsOn"
                                     Icon="@Icons.Material.Filled.ArrowDownward" ToggledIcon="@Icons.Material.Filled.ArrowUpward"/>
            </MudStack>
            @if (ParcelsOn)
            {
                <CascadingValue Value="Package.Services.dpdLQ">
                    <CascadingValue Value="Package.Parcels">
                        <ParcelsTable/>
                    </CascadingValue>
                </CascadingValue>
            }
        </MudItem>
        
        <MudDivider Class="mt-4 mx-4"/>
    }

    <MudItem xs="3">
        <MudStack>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="GenerateLabel">
                @if (_processingLabel)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Generate Label</MudText>
                }
            </MudButton>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="GenerateProtocol" Disabled="@(Package.Base64Label is null)">
                @if (_processingProtocol)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Generate Protocol</MudText>
                }
            </MudButton>
            <!-- Tracking links -->
            @if (Package.Parcels.Count > 0)
            {
                <MudPanel>
                    <MudTable Items="@TrackingLinks" Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>Waybill</MudTh>
                            <MudTh>GeoPost</MudTh>
                            <MudTh>TrackTrace</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Waybill" Style="font-size: 0.9vw">@context.waybill</MudTd>
                            <MudTd DataLabel="GeoPost">
                                <MudLink Style="font-size: 0.9vw" Target="_blank" Href="@context.getGeoPostLink()">GeoPost</MudLink>
                            </MudTd>
                            <MudTd DataLabel="TrackTrace">
                                <MudLink Style="font-size: 0.9vw" Target="_blank" Href="@context.getTrackTraceLink()">TrackTrace</MudLink>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPanel>
            }
            else
            {
                <MudCard>
                    <MudCardContent Style="text-align: center">
                        <h3>Tracking</h3>
                    </MudCardContent>
                </MudCard>
            }
        </MudStack>
    </MudItem>
    
    @if (Errors.Count == 0)
    {
        <MudItem xs="4">
            @if (Package.Base64Label is not null)
            {
                <MudCard style="height:750px" Elevation="2">
                    <MudCardContent>
                        <iframe width="100%" height="100%" src="data:application/pdf;base64,@Package.Base64Label" frameborder="0"></iframe>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudCard>
                    <MudCardContent Style="text-align: center" Elevation="2">
                        <h3>Label</h3>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
        <MudItem xs="5">
            @if (Package.Base64Protocol is not null)
            {
                <MudCard style="height:750px" Elevation="2">
                    <MudCardContent>
                        <iframe width="100%" height="100%" src="data:application/pdf;base64,@Package.Base64Protocol" frameborder="0"></iframe>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudCard>
                    <MudCardContent Style="text-align: center" Elevation="2">
                        <h3>Protocol</h3>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    }
    else
    {
        <MudItem xs="9">
            <ErrorsList Errors="Errors" />
        </MudItem>
    }
</MudGrid>

@code {
    readonly Profile _profileFromTextBoxes = new Profile();
    Profile _currentProfile;
    
    MudTextField<string>? ReceiverPostalCodeField;
    MudSelect<WsdlAddress>? EnviromentField;
    
    private bool _processingLabel = false;
    private bool _processingProtocol = false;
    private bool _refreshing = false;
    
    [CascadingParameter]
    public Profile CurrentProfile
    {
        get => _currentProfile;
        set
        {
            _currentProfile = value;
            UpdateCredentials(_currentProfile);
        }
    }

    public List<SoapError> Errors
    {
        get => AppState.GenerateLabelsState.Errors;
        set => AppState.GenerateLabelsState.Errors = value;
    }

    public bool ServicesOn
    {
        get => AppState.GenerateLabelsState.ServicesOn;
        set => AppState.GenerateLabelsState.ServicesOn = value;
    }

    public bool DetailsOn
    {
        get => AppState.GenerateLabelsState.DetailsOn;
        set => AppState.GenerateLabelsState.DetailsOn = value;
    }

    public bool ParcelsOn
    {
        get => AppState.GenerateLabelsState.ParcelsOn;
        set => AppState.GenerateLabelsState.ParcelsOn = value;
    }

    public int ActiveMode
    {
        get => AppState.GenerateLabelsState.ActiveMode;
        set => AppState.GenerateLabelsState.ActiveMode = value;
    }

    public List<TrackingLinkService> TrackingLinks
    {
        get => AppState.GenerateLabelsState.TrackingLinks;
        set => AppState.GenerateLabelsState.TrackingLinks = value;
    }

    public Package Package
    {
        get => AppState.GenerateLabelsState.package;
        set => AppState.GenerateLabelsState.package = value;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UpdateCredentials(CurrentProfile);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task GenerateLabel()
    {
        _processingLabel = true;
        Errors.Clear();
        Package.Base64Protocol = null;
        Package.Base64Label = null;
        TrackingLinks.Clear();

        try
        {
            Package.ThirdPartyFID = _profileFromTextBoxes.FID;
            await Package.GenerateWaybills(_profileFromTextBoxes);
        }
        catch (SoapException e)
        {
            foreach (var soapError in e.Errors)
            {
                Errors.Add(soapError);
            }
            _processingLabel = false;
            return;
        }

        foreach (var parcel in Package.Parcels)
        {
            TrackingLinks.Add(new TrackingLinkService(parcel.Waybill));
        }
        
        if (AppState.Settings.SaveLabelsToFile) FileService.SaveBase64ToPDF(Package.Base64Label, PrintType.Label);
        
        _processingLabel = false;
    }

    private async Task GenerateProtocol(MouseEventArgs obj)
    {
        _processingProtocol = true;
        try
        {
            await Package.GenerateProtocol(_profileFromTextBoxes);
        }
        catch (SoapException e)
        {
            foreach (var soapError in e.Errors)
            {
                Errors.Add(soapError);
            }
            _processingProtocol = false;
            return;
        }

        if (AppState.Settings.SaveProtocolsToFile) FileService.SaveBase64ToPDF(Package.Base64Protocol, PrintType.Protocol);
        _processingProtocol = false;
    }

    //Infer masterfid/fid from login
    private void LoginChanged(string login)
    {
        if (Regex.IsMatch(login, "01$"))
        {
            var fid = login[..^2];
            _profileFromTextBoxes.MasterFid = fid;
            _profileFromTextBoxes.FID = fid;
        }
        _profileFromTextBoxes.Login = login;
        StateHasChanged();
    }

    private void UpdateCredentials(Profile profile)
    {
        _profileFromTextBoxes.Login = profile.Login;
        _profileFromTextBoxes.Password = profile.Password;
        _profileFromTextBoxes.MasterFid = profile.MasterFid;
        _profileFromTextBoxes.FID = profile.FID;
        _profileFromTextBoxes.WsdlAddress = profile.WsdlAddress;
        if (EnviromentField != null) EnviromentField.Value = _profileFromTextBoxes.WsdlAddress;
        StateHasChanged();
    }
    
    private void DpdLq(bool obj)
    {
        if (!obj)
        {
            foreach (var parcel in Package.Parcels)
            {
                parcel.AdrWeight = null;
            }   
        }
        Package.Services.dpdLQ = obj;
        StateHasChanged();
    }
    
    public void RefreshState(){
        this.StateHasChanged();
    }

    private void RefreshData()
    {
        _refreshing = true;
        Package = new Package();
        TrackingLinks.Clear();
        Errors.Clear();
        _refreshing = false;
        StateHasChanged();
    }
    
    //TODO Debug this
    private async void OnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await GenerateLabel();
        }
    }
}