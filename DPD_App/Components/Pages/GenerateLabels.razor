@page "/GenerateLabels"
@using System.Text.RegularExpressions
@using System.Xml.Serialization
@using DPD_App.Models
@inject AppState AppState

<PageTitle>GenerateLabels</PageTitle>

<MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-4">
    <h1 class="pa-1">Generate Labels</h1>
    <MudTabs Elevation="2" Rounded="true" @bind-ActivePanelIndex="activeMode">
        <MudTabPanel Text="Simple" />
        <MudTabPanel Text="Extended" />
    </MudTabs>
</MudStack>

<MudGrid>
    <MudItem xs="12">
        <MudStack Row="true">
            <MudTextField T="string" Value="profileFromTextBoxes.Login" Label="Login" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="LoginChanged" Immediate="true"></MudTextField>
            <MudTextField @bind-Value="profileFromTextBoxes.Password" T="string" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="profileFromTextBoxes.MasterFid" T="string" Label="MasterFid" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="package.ThirdPartyFID" T="string" Label="Fid" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudSelect @ref="EnviromentField" @bind-Value="profileFromTextBoxes.WsdlAddress" T="WsdlAddress" Label="Select enviroment">
                @foreach (var wsdlAddres in Globals.WsdlAddresses)
                {
                <MudSelectItem Value="wsdlAddres">@wsdlAddres.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </MudItem>

    <MudDivider Class="mt-6 mx-4"/>
    
    <!-- Extended mode -->
    @if (activeMode == 1)
    {
        <MudItem xs="9">
            <MudStack Row="true" Class="mb-4" Spacing="2">
                <MudText Typo="Typo.h5">Sender details</MudText>
                <MudToggleIconButton Size="Size.Small" @bind-Toggled="senderOn"
                                     Icon="@Icons.Material.Filled.ArrowDownward" ToggledIcon="@Icons.Material.Filled.ArrowUpward"/>
            </MudStack>

            @if (senderOn)
            {
                <MudStack Row="true" Wrap="Wrap.Wrap">
                    <MudTextField @bind-Value="package.Sender.Company" Label="Company" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Sender.Name" Label="Name" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Sender.Address" Label="Address" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Sender.PostalCode" Label="PostalCode" Variant="Variant.Outlined"/>
                    <MudSelect T="string" @bind-Value="package.Sender.CountryCode" Label="CountryCode" Variant="Variant.Outlined">
                        @foreach (var country in Globals.Countries)
                        {
                            <MudSelectItem Value="@country.IsoCodeA2">@country.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField @bind-Value="package.Sender.City" Label="City" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Sender.Phone" Label="Phone" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Sender.Email" Label="Email" Variant="Variant.Outlined"/>
                </MudStack>
            }

            <MudDivider Class="my-6"/>
            <MudStack Row="true" Class="mb-4" Spacing="2">
                <MudText Typo="Typo.h5">Receiver details</MudText>
                <MudToggleIconButton Size="Size.Small" @bind-Toggled="recieverOn"
                                     Icon="@Icons.Material.Filled.ArrowDownward" ToggledIcon="@Icons.Material.Filled.ArrowUpward"/>
            </MudStack>
            @if (recieverOn)
            {
                <MudStack Row="true" Wrap="Wrap.Wrap">
                    <MudTextField @bind-Value="package.Receiver.Company" Label="Company" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Receiver.Name" Label="Name" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Receiver.Address" Label="Address" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Receiver.PostalCode" Label="PostalCode" Variant="Variant.Outlined"/>
                    <MudSelect T="Country" Value="_receiverCountry" Label="CountryCode" Variant="Variant.Outlined" ValueChanged="ReceiverCountryChanged">
                        @foreach (var country in Globals.Countries)
                        {
                            <MudSelectItem Value="@country">@country.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField @bind-Value="package.Receiver.City" Label="City" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Receiver.Phone" Label="Phone" Variant="Variant.Outlined"/>
                    <MudTextField @bind-Value="package.Receiver.Email" Label="Email" Variant="Variant.Outlined"/>
                </MudStack>
            }
        </MudItem>

        <MudItem xs="3">
            <MudStack Row="true" Class="mb-4" Spacing="2">
                <MudText Typo="Typo.h5">Services</MudText>
                <MudToggleIconButton Size="Size.Small" @bind-Toggled="servicesOn"
                                     Icon="@Icons.Material.Filled.ArrowDownward" ToggledIcon="@Icons.Material.Filled.ArrowUpward"/>
            </MudStack>
            <!-- Services -->
            @if (servicesOn)
            {
                <MudPaper Class="pa-2">
                    <MudGrid Class="pa-0">
                        <MudItem xs="6">
                            <MudStack Spacing="0">
                                <!-- Krajowa = international -->
                                <MudTooltip Arrow="true" Text="<cud/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.cud" Label="Return shipment" Disabled="package.International"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<rod/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.rod" Label="Return documents" Disabled="package.International"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<inPers/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.inPers" Label="Delivery to a dedicated person" Disabled="package.International || package.Services.dpdPickup"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<privPers/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.privPers" Label="B2C consignment" Disabled="package.Services.dpdPickup"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<dpdExpress/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.dpdExpress" Label="Air delivery" Disabled="!package.International || package.Services.pallet"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<pallet/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.pallet" Label="International pallet" Disabled="!package.International || package.Services.dpdExpress || package.Services.tiresExport"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<dox/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.dox" Label="Letter shipment" Disabled="package.International || package.Services.dpdLQ || package.Services.tires || package.Services.dpdFood || package.Services.carryIn"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<dpdLQ/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" Value="@package.Services.dpdLQ" Label="Shipment of dangerous goods" ValueChanged="DpdLQ" Disabled="package.Services.dox || package.Services.tires || package.Services.dpdFood"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<tires/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.tires" Label="Domestic tires" Disabled="@(package.International || package.Services.dpdLQ || package.Services.dox || package.Services.dpdPickup || package.Services.dpdFood || package.Services.Guarantee.type == "TIME0930" || package.Services.Guarantee.type == "TIME1200" || package.Services.Guarantee.type == "TIMEFIXED" || package.Services.Guarantee.type == "B2C" || package.Services.Guarantee.type == "DPDNEXTDAY" || package.Services.Guarantee.type == "DPDTODAY")" />
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<tiresExport/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.tiresExport" Label="Foreign tyres" Disabled="!package.International || package.Services.dpdExpress"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<digitalLabel/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.digitalLabel" Label="Send Parcel without a label" Disabled="package.International || package.Services.carryIn"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<pudoToSend/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.pudoToSend" Label="Sending a parcel at Pickup point" Disabled="package.International || package.Services.carryIn"/>
                                </MudTooltip>
                                <MudTooltip Arrow="true" Text="<carryIn/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.carryIn" Label="Carry-in" Disabled="package.International || package.Services.dox || package.Services.pudoToSend || package.Services.digitalLabel || package.Services.selfCol"/>
                                </MudTooltip>
                            </MudStack>
                        </MudItem>
                        
                        <MudItem xs="6">
                            <MudStack Spacing="0">
                                <MudTooltip Arrow="true" Text="<pudoToSend/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.declaredValue" Label="Declared value"/>
                                </MudTooltip>
                                @if (package.Services.declaredValue)
                                {
                                    <MudSelect T="Currency" @bind-Value="@package.Services.DeclaredValue.currency" Label="Currency" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        @foreach (var currency in Globals.Currencies.Where(c => c.IsDeclaredAmount))
                                        {
                                            <MudSelectItem Value="@currency">@currency.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTextField Label="Amount" @bind-Value="@package.Services.DeclaredValue.amount" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                }

                                <MudTooltip Arrow="true" Text="<cod/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.cod" Label="Cash on delivery (COD)"/>
                                </MudTooltip>
                                @if (package.Services.cod)
                                {
                                    <MudSelect T="Currency" @bind-Value="@package.Services.Cod.currency" Label="Currency" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        @foreach (var currency in Globals.Currencies.Where(c => c.IsCod))
                                        {
                                            <MudSelectItem Value="@currency">@currency.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTextField Label="Cash amount" @bind-Value="@package.Services.Cod.amount" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                }

                                <MudTooltip Arrow="true" Text="<dpdPickup/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.dpdPickup" Label="Delivery to the Pickup Point" Disabled="package.Services.tires || package.Services.privPers || package.Services.inPers"/>
                                </MudTooltip>
                                @if (package.Services.dpdPickup)
                                {
                                    <MudTextField Label="Point ID" @bind-Value="@package.Services.DpdPickup.pudo" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                }

                                <MudTooltip Arrow="true" Text="<duty/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.duty" Label="Customs clearance service" Disabled="!package.International"/>
                                </MudTooltip>
                                @if (package.Services.duty)
                                {
                                    <MudSelect T="Currency" @bind-Value="@package.Services.Duty.currency" Label="Currency" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        @foreach (var currency in Globals.Currencies.Where(c => c.IsDuty))
                                        {
                                            <MudSelectItem Value="@currency">@currency.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTextField Label="Cash amount" @bind-Value="@package.Services.Duty.amount" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                }

                                <MudTooltip Arrow="true" Text="<selfCol/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.selfCol" Label="Personal collection" Disabled="package.International || package.Services.carryIn"/>
                                </MudTooltip>
                                @if (package.Services.selfCol)
                                {
                                    <MudSelect T="string" @bind-Value="@package.Services.SelfCol.receiver" Label="Receiver" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true">
                                        <MudSelectItem T="string" Value="@("PRIV")">Private</MudSelectItem>
                                        <MudSelectItem T="string" Value="@("COMP")">Company</MudSelectItem>
                                    </MudSelect>
                                }

                                <MudTooltip Arrow="true" Text="<dpdFood/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.dpdFood" Label="Food delivery" Disabled="package.International || package.Services.tires || package.Services.dox || package.Services.dpdLQ"/>
                                </MudTooltip>
                                @if (package.Services.dpdFood)
                                {
                                    <MudTextField @bind-Value="@package.Services.DpdFood.limitDate" T="DateTime" Format="yyyy-MM-dd" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Limit Date" InputType="InputType.Date"/>
                                }

                                <MudTooltip Arrow="true" Text="<guarentee/>" Placement="Placement.Top" Color="Color.Info">
                                    <MudCheckBox Dense="true" T="bool" @bind-Value="@package.Services.guarantee" Label="Guarantee"/>
                                </MudTooltip>
                                @if (package.Services.guarantee)
                                {
                                    <MudSelect T="string" @bind-Value="@package.Services.Guarantee.type" Label="Type" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        <MudSelectItem Value="@("TIME0930")" Disabled="package.International || package.Services.tires">Delivery at 9:30</MudSelectItem>
                                        <MudSelectItem Value="@("TIME1200")" Disabled="package.International || package.Services.tires">Delivery at 12:00</MudSelectItem>
                                        <MudSelectItem Value="@("SATURDAY")" Disabled="package.International">Delivery on saturday</MudSelectItem>
                                        <MudSelectItem Value="@("TIMEFIXED")" Disabled="package.International || package.Services.tires">Delivery at given hour</MudSelectItem>
                                        <MudSelectItem Value="@("B2C")" Disabled="package.International || package.Services.tires">Bussiness to customer</MudSelectItem>
                                        <MudSelectItem Value="@("DPDNEXTDAY")" Disabled="package.International || package.Services.tires">Delivery next day</MudSelectItem>
                                        <MudSelectItem Value="@("DPDTODAY")" Disabled="package.International || package.Services.tires || package.Services.carryIn">Delivery Today</MudSelectItem>
                                        <MudSelectItem Value="@("INTER")" Disabled="!package.International">International Guarantee</MudSelectItem>
                                    </MudSelect>
                                    @if (package.Services.Guarantee.type is not null && (package.Services.Guarantee.type == "B2C" || package.Services.Guarantee.type == "TIMEFIXED"))
                                    {
                                        <MudTextField @bind-Value="@package.Services.Guarantee.value" T="string" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Time of delivery"/>
                                    }
                                }
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </MudItem>

        <MudDivider Class="mt-4 mx-4"/>
        <MudItem xs="3">
            <MudText Typo="Typo.h5" Class="mb-2">Additional details</MudText>
            <MudStack>
                <MudTextField Margin="Margin.Dense" @bind-Value="package.Ref1" Label="ref1" Variant="Variant.Outlined"/>
                <MudTextField Margin="Margin.Dense" @bind-Value="package.Ref2" Label="ref2" Variant="Variant.Outlined"/>
                <MudTextField Margin="Margin.Dense" @bind-Value="package.Ref3" Label="ref3" Variant="Variant.Outlined"/>
            </MudStack>
        </MudItem>
        
        <MudItem xs="9">
            <MudText Typo="Typo.h5" Class="mb-2">Parcels</MudText>
            <CascadingValue Value="package.Services.dpdLQ">
                <CascadingValue Value="package.Parcels">
                    <ParcelsTable />
                </CascadingValue>
            </CascadingValue>
        </MudItem>
        
        <MudDivider Class="mt-4 mx-4"/>
    }

    <MudItem xs="3">
        <MudStack>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="GenerateLabel">
                @if (_processingLabel)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Generate Label</MudText>
                }
            </MudButton>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="GenerateProtocol" Disabled="@(package.Base64Label is null)">
                @if (_processingProtocol)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Generate Protocol</MudText>
                }
            </MudButton>
            <!-- Tracking links -->
            @if (package.Parcels.Count > 0)
            {
                <MudCard>
                    <MudCardContent>
                        <MudTable Items="@TrackingLinks" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh>Waybill</MudTh>
                                <MudTh>GeoPost</MudTh>
                                <MudTh>TrackTrace</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Waybill" Style="font-size: 0.9vw">@context.waybill</MudTd>
                                <MudTd DataLabel="GeoPost">
                                    <MudLink Style="font-size: 0.9vw" Href="@context.getGeoPostLink()">GeoPost</MudLink>
                                </MudTd>
                                <MudTd DataLabel="TrackTrace">
                                    <MudLink Style="font-size: 0.9vw" Href="@context.getTrackTraceLink()">TrackTrace</MudLink>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudCard>
                    <MudCardContent Style="text-align: center">
                        <h3>Tracking</h3>
                    </MudCardContent>
                </MudCard>
            }
        </MudStack>
    </MudItem>
    
    @if (Errors.Count == 0)
    {
        <MudItem xs="4">
            @if (package.Base64Label is not null)
            {
                <MudCard style="height:750px">
                    <MudCardContent>
                        <iframe width="100%" height="100%" src="data:application/pdf;base64,@package.Base64Label" frameborder="0"></iframe>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudCard>
                    <MudCardContent Style="text-align: center">
                        <h3>Label</h3>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
        <MudItem xs="5">
            @if (package.Base64Protocol is not null)
            {
                <MudCard style="height:750px">
                    <MudCardContent>
                        <iframe width="100%" height="100%" src="data:application/pdf;base64,@package.Base64Protocol" frameborder="0"></iframe>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudCard>
                    <MudCardContent Style="text-align: center">
                        <h3>Protocol</h3>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    }
    else
    {
        <MudItem xs="9">
            <MudCard Style="white-space: pre-wrap">
                <MudCardContent Style="text-align: center">
                    <h3>Error</h3>
                </MudCardContent>
                @foreach (var error in Errors)
                {
                    <ErrorPaper Error="error" />
                }
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    WsdlAddress wsdlAddres = Globals.WsdlAddresses.Single(a => a.Name == "DEMO");
    List<SoapError> Errors = new List<SoapError>();

    Profile profileFromTextBoxes = new Profile();
    Profile _currentProfile;
    [CascadingParameter]
    public Profile CurrentProfile
    {
        get => _currentProfile;
        set
        {
            _currentProfile = value;
            UpdateCredentials(_currentProfile);
        }
    }
    
    string _request = "";
    string _response = "";
    private bool _processingLabel = false;
    private bool _processingProtocol = false;
    public bool recieverOn = true;
    public bool senderOn = true;
    public bool servicesOn = true;
    public int activeMode;
    
    Package package;
    Country _receiverCountry;
    
    private List<TrackingLinkService> TrackingLinks = new List<TrackingLinkService>();
    
    MudTextField<string>? ReceiverPostalCodeField;
    MudSelect<WsdlAddress>? EnviromentField;

    protected override Task OnInitializedAsync()
    {
        package = new Package();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UpdateCredentials(CurrentProfile);
            ReceiverCountryChanged(Globals.Countries.Single(c => c.IsoCodeA2 == "PL"));
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task GenerateLabel()
    {
        _processingLabel = true;
        Errors.Clear();
        package.Base64Protocol = null;
        package.Base64Label = null;
        TrackingLinks.Clear();

        try
        {
            await package.GenerateWaybills(profileFromTextBoxes);
        }
        catch (SoapException e)
        {
            foreach (var soapError in e.Errors)
            {
                Errors.Add(soapError);
            }
            _processingLabel = false;
            return;
        }

        foreach (var parcel in package.Parcels)
        {
            TrackingLinks.Add(new TrackingLinkService(parcel.Waybill));
        }
        
        if (AppState.Settings.SaveLabelsToFile) PdfService.SaveBase64ToPDF(package.Base64Label, PrintType.Label);
        
        _processingLabel = false;
    }

    private async Task GenerateProtocol(MouseEventArgs obj)
    {
        _processingProtocol = true;
        try
        {
            await package.GenerateProtocol(profileFromTextBoxes);
        }
        catch (SoapException e)
        {
            foreach (var soapError in e.Errors)
            {
                Errors.Add(soapError);
            }
            _processingProtocol = false;
            return;
        }

        if (AppState.Settings.SaveProtocolsToFile) PdfService.SaveBase64ToPDF(package.Base64Protocol, PrintType.Protocol);
        _processingProtocol = false;
    }

    private void ReceiverCountryChanged(Country country)
    {
        _receiverCountry = country;
        package.Receiver.CountryCode = country.IsoCodeA2;
        if (country.DefaultPostalCode != null) package.Receiver.PostalCode = country.DefaultPostalCode;
        if (country.Currency != null)
        {
            if(country.Currency.IsCod) package.Services.Cod.currency = country.Currency;
            if(country.Currency.IsDuty) package.Services.Duty.currency = country.Currency;
            if(country.Currency.IsDeclaredAmount) package.Services.DeclaredValue.currency = country.Currency;
        }
        
        StateHasChanged();
    }

    private void LoginChanged(string login)
    {
        if (Regex.IsMatch(login, "01$"))
        {
            var fid = login[..^2];
            profileFromTextBoxes.MasterFid = fid;
            package.ThirdPartyFID = fid;
        }
        profileFromTextBoxes.Login = login;
        StateHasChanged();
    }

    private void UpdateCredentials(Profile profile)
    {
        profileFromTextBoxes.Login = profile.Login;
        profileFromTextBoxes.Password = profile.Password;
        profileFromTextBoxes.MasterFid = profile.MasterFid;
        profileFromTextBoxes.WsdlAddress = profile.WsdlAddress;
        if (EnviromentField != null) EnviromentField.Value = profileFromTextBoxes.WsdlAddress;
        StateHasChanged();
    }
    
    private void DpdLQ(bool obj)
    {
        if (!obj)
        {
            foreach (var parcel in package.Parcels)
            {
                parcel.AdrWeight = null;
            }   
        }
        package.Services.dpdLQ = obj;
        StateHasChanged();
    }
    
    //TODO Make error message prettier
    //TODO Try making temporary current profile

}