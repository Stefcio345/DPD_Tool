@page "/SoapAPI"
@using MudBlazor.Extensions

<PageTitle>SoapAPI</PageTitle>
<MudText Typo="Typo.h3">Soap API</MudText>

<MudPaper Class="my-8 pa-0" Elevation="0" Square="true" Height="100%">
    <MudStack Row="true" Class="pa-0">
        <MudPaper Class="py-0" Width="@(size + "%")">
            <MudPaper Class="pa-4" Elevation="10" Square="true" Height="100%">
                <MudList Padding="true" T="Tab" SelectionMode="SelectionMode.SingleSelection" SelectedValue="CurrentTab" SelectedValueChanged="OnTabChange">
                    @foreach (var tab in Tabs)
                    {
                        <MudListItem Class="pa-1 my-2" Value="@tab">
                            <MudStack Justify="Justify.SpaceBetween" Row="true">
                                <MudText Typo="Typo.h5" Style="overflow: hidden">@tab.SoapData.Title</MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => { RemoveTab(@tab); })"/>
                            </MudStack>
                        </MudListItem>
                    }
                </MudList>
                <MudStack>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="@(() => { AddTab(); })"/>
                </MudStack>
            </MudPaper>
        </MudPaper>
        <MudPaper Class="pa-6" Width="@(100-size + "%")">
            @if (CurrentTab.SoapData is not null)
            {
                <SoapInterface SoapData="@CurrentTab.SoapData"/>
            }
            else
            {
                <MudText Typo="Typo.h3">Home</MudText>
            }
        </MudPaper>
    </MudStack>
    <MudSlider @bind-Value="size" Min="0" Max="100" Step="0.1" />
</MudPaper>

@code {
    public class Tab
    {
        public string Title { get; set; }
        public bool IsActive = false;
        public SoapData? SoapData;
    }
    
    public List<Tab> Tabs = new();
    public Tab CurrentTab;
    public double size = 20;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Tabs.Add(new Tab { Title = "Home", IsActive = true, SoapData = new SoapData(StateHasChanged)});
        CurrentTab = Tabs.FirstOrDefault(t => t.IsActive);
    }
    

    public void AddTab()
    {
        //Create dynamic tab names
        var tab = new Tab { Title = $"Tab {Tabs.Count}", SoapData = new SoapData(this.StateHasChanged) };
        tab.Title = tab.SoapData.Title;
        Tabs.Add(tab);
        StateHasChanged();
    }

    public void RemoveTab(Tab tab)
    {
        Tabs.Remove(tab);
        StateHasChanged();
    }
    

    private void OnTabChange(Tab tab)
    {
        //TODO Create more dynamic naming system
        //TODO add censoring of credentials
        //TODO add saving session ID and waybills
        //TODO maybe add downloading label
        CurrentTab = tab;
        StateHasChanged();
    }

}
