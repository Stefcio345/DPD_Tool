@page "/"
@page "/SoapAPI"

<PageTitle>SoapAPI</PageTitle>
<MudText Typo="Typo.h3">Soap API</MudText>

<MudDynamicTabs @bind-ActivePanelIndex="@UserIndex" Position="Position.Left"
                AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab. All data will be lost"
                PanelClass="px-4 py-6" Elevation="4" Rounded ApplyEffectsToContainer
                PrevIcon="" NextIcon="">>
    @foreach (var tab in UserTabs)
    {
        <MudTabPanel ID="@tab.Id" Text="@tab.Label" ShowCloseIcon="@tab.ShowCloseIcon">
            @if (tab.SoapData is not null)
            {
                <SoapInterface SoapData="@tab.SoapData"/>
            }
            else
            {
                @tab.Content
            }
        </MudTabPanel>
    }
</MudDynamicTabs>

@code {
    //Probably will replace tabs with something else

    public class TabView
    {
        public string Label { get; set; }
        public string Content { get; set; }
        public SoapData? SoapData;
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = true;
    }
    
    public List<TabView> UserTabs = new();
    public int UserIndex;
    bool _stateHasChanged;
    bool _showCloseIcon = false;
    string _closeToggableTab = "Tab B";

    void RestoreUserTabs()
    {
        UserTabs.Clear();
        UserTabs.Add(new TabView { Id = Guid.NewGuid(), Label = "Home", Content = "Home", ShowCloseIcon = false});
        UserIndex = 0; // Start on 2nd tab: "Tab B"
        _stateHasChanged = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RestoreUserTabs();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (_stateHasChanged)
        {
            _stateHasChanged = false;
            StateHasChanged();
        }
    }

    public void AddTab(Guid id)
    {
        var newTab = new TabView { Id = id, Label = $"Tab {UserTabs.Count}", Content = $"Tab ID: {id}", SoapData = new SoapData(StateHasChanged) };
        //Create dynamic tab names
        UserTabs.Add(newTab);
        UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
        _stateHasChanged = true;
    }

    public void RemoveTab(Guid id)
    {
        var tabView = UserTabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            UserTabs.Remove(tabView);
            _stateHasChanged = true;
        }
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);
}
