@page "/SoapAPI"

<PageTitle>SoapAPI</PageTitle>
<MudText Typo="Typo.h3">Soap API</MudText>

<MudPaper Class="my-8 pa-0" Elevation="0" Square="true" Height="100%">
    <MudGrid Class="pa-0">
        <MudItem xs="2" Class="py-0">
            <MudPaper Class="pa-4" Elevation="10" Square="true" Height="100%">
                <MudList Padding="true" T="TabView" SelectionMode="SelectionMode.SingleSelection" SelectedValue="CurrentTab" SelectedValueChanged="OnTabChange">
                    @foreach (var tab in UserTabs)
                    {
                        <MudListItem Class="pa-1 my-2" Value="@tab">
                            <MudStack Justify="Justify.SpaceBetween" Row="true">
                                <MudText Typo="Typo.h5" Style="overflow: hidden" >@tab.Label</MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => { RemoveTab(@tab); })"/>
                            </MudStack>
                        </MudListItem>
                    }
                </MudList>
                <MudStack>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="@(() => { AddTab(); })"/>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="10" Class="pa-6">
            @if (CurrentTab.SoapData is not null)
            {
                <SoapInterface SoapData="@CurrentTab.SoapData"/>
            }
            else
            {
                <MudText Typo="Typo.h3">Home</MudText>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    public class TabView
    {
        public string Label { get; set; }
        public SoapData? SoapData;
        public bool ShowCloseIcon { get; set; } = true;
    }
    
    public List<TabView> UserTabs = new();
    public TabView CurrentTab;

    void RestoreUserTabs()
    {
        UserTabs.Clear();
        UserTabs.Add(new TabView { Label = "Home", ShowCloseIcon = false});
        CurrentTab = UserTabs[0];
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RestoreUserTabs();
    }
    

    public void AddTab()
    {
        //Create dynamic tab names
        var tab = new TabView { Label = $"Tab {UserTabs.Count}", SoapData = new SoapData(this.StateHasChanged) };
        UserTabs.Add(tab);
        StateHasChanged();
    }

    public void RemoveTab(TabView tab)
    {
        UserTabs.Remove(tab);
        StateHasChanged();
    }
    

    private void OnTabChange(TabView tab)
    {
        //TODO Create more dynamic naming system
        if (CurrentTab.SoapData is not null) CurrentTab.Label = CurrentTab.SoapData.CurrentMethod.ToString();
        CurrentTab = tab;
        StateHasChanged();
    }

}
