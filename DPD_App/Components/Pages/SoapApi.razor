@page "/SoapAPI"
@using MudBlazor.Extensions
@inject IJSRuntime JS
@inject AppState AppState

<Style>
    .resize-handle {
        width: 10px;
        background-color: #00000000;
        position: relative;
        cursor: col-resize;
    }
</Style>

<script>
    window.initializeResizeHandle = (elementId, dotNetHelper) => {
        const paper = document.getElementById("MainContainer");
        const resizeHandle = document.getElementById(elementId);
        let isResizing = false;

        resizeHandle.addEventListener('mousedown', function (e) {
            isResizing = true;
        });

        document.addEventListener('mousemove', function (e) {
            if (isResizing) {
                if (e.clientX > (paper.getBoundingClientRect().left+200) && e.clientX < paper.getBoundingClientRect().right-900)
                {
                    const newSize = (e.clientX-paper.getBoundingClientRect().left)/(paper.getBoundingClientRect().width);
                    dotNetHelper.invokeMethodAsync('UpdateSize', newSize);
                }
            }
        });

        document.addEventListener('mouseup', function () {
            isResizing = false;
        });
    };
</script>

<PageTitle>SoapAPI</PageTitle>
<MudGrid>
    <MudItem xs="2">
        <h1 class="pa-1 pb-3">Soap API</h1>
    </MudItem>
</MudGrid>

<div Id="MainContainer">
    <MudStack Row="true" Class="pa-0" Spacing="0">
        <MudPaper Class="py-0" Width="@(size + "%")">
            <MudPaper Class="pa-4" Elevation="3" Height="100%">
                <MudText Typo="Typo.h4" Class="pa-1">Tabs</MudText>
                <MudStack>
                    @foreach (var tab in Tabs)
                    {
                        <MudButton OnClick="@(() => ActivateTab(tab))" Color="@GetTabButtonColor(tab)" Style="justify-content: left; display: flow" DropShadow="true" Variant="Variant.Filled">
                            <MudStack Justify="Justify.SpaceBetween" Row="true">
                                @if (tab.Data.CurrentMethod.Type != SOAP_API_METHODS.EMPTY)
                                {
                                    <MudText Style="overflow: hidden" Class="pt-1">@tab.Data.CurrentMethod.Type</MudText>
                                }
                                else
                                {
                                    <MudText Style="overflow: hidden" Class="pt-1">@tab.Title</MudText>
                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => { RemoveTab(@tab); })"/>
                            </MudStack>
                        </MudButton>
                    }
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Class="py-2" Color="Color.Success" Size="Size.Small" OnClick="@(() => { AddNewTab(); })">Add new tab</MudButton>
                </MudStack>
            </MudPaper>
        </MudPaper>
        <div Id="ResizeHandle" class="resize-handle"></div>
        <MudPaper Elevation="0"  Class="pa-0 mud-background" Width="@(100 - size + "%")">
            @if (ActiveTab is not null)
            {
                <CascadingValue Value="CurrentProfile">
                    <SoapInterface Data="ActiveTab.Data"/>
                </CascadingValue>
            }
            else
            {
                <MudPaper Height="100%">
                    <MudText Typo="Typo.h3">
                        Sample Page
                    </MudText>
                </MudPaper>
            }
        </MudPaper>
    </MudStack>
</div>

@code {
    
    [CascadingParameter]
    public Profile CurrentProfile { get; set; }
    private DotNetObjectReference<SoapApi>? dotNetRef;
    
    public class TabItem
    {
        public string Title { get; set; }
        public SoapData Data;
        public bool IsActive { get; set; }
    }

    public List<TabItem> Tabs
    {
        get => AppState.SoapApiData.Tabs;
        set => AppState.SoapApiData.Tabs = value;
    }
    private TabItem? ActiveTab { get; set; }
    public double size
    {
        get => AppState.SoapApiData.size;
        set => AppState.SoapApiData.size = value; 
    }

    protected override void OnInitialized()
    {
        // Initialize with default tab
        if(Tabs.Count == 0) Tabs.Add(new TabItem { Title = "Tab 1", IsActive = true, Data = new SoapData(StateHasChanged, CurrentProfile) });
        // Set the first tab as active
        if (ActiveTab is null)
        {
            ActiveTab = Tabs.FirstOrDefault(t => t.IsActive);
            ActiveTab.Data.Update = true;
        }
    }
    
    private void ActivateTab(TabItem tab)
    {
        foreach (var t in Tabs)
        {
            t.IsActive = false;
        }

        tab.IsActive = true;
        
        //If Tab was empty delete
        //if (ActiveTab.Data.CurrentMethod is null)
        //{
        //    RemoveTab(ActiveTab);
        //}

        ActiveTab = tab;
        ActiveTab.Data.Update = true;
        StateHasChanged();
    }

    private Color GetTabButtonColor(TabItem tab)
    {
        return tab.IsActive ? Color.Primary : Color.Default;
    }

    private void AddNewTab()
    {
        int tabIndex = Tabs.Count + 1;
        var newTab = new TabItem
        {
            Title = $"Tab {tabIndex}",
            IsActive = false,
            Data = new SoapData(StateHasChanged, CurrentProfile),
        };
        Tabs.Add(newTab);
        //Switch to new tab
        ActivateTab(newTab);
    }
    
    public void RemoveTab(TabItem tab)
    {
        Tabs.Remove(tab);
        if (tab.IsActive)
        {
            if (Tabs.Count > 0)
            {
                ActivateTab(Tabs.First());
            }
            else
            {
                ActiveTab = null;
            }
        }
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeResizeHandle", "ResizeHandle", dotNetRef);
        }
    }
    
    [JSInvokable]
    public void UpdateSize(double newSize)
    {
        size = newSize*100;
        StateHasChanged();
    }

}
