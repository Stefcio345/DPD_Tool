@page "/SoapAPI"
@using MudBlazor.Extensions

<PageTitle>SoapAPI</PageTitle>
<MudGrid>
    <MudItem xs="2">
        <h1 class="pa-1 pb-3">Soap API</h1>
    </MudItem>
    <MudItem xs="10">
        <MudPaper Class="pa-2 mr-20">
            <MudStack Row="true">
                <MudPaper Class="pa-2">
                    <MudText>SessionId: @latestSoapData.SessionId</MudText>
                </MudPaper>
                <MudPaper Class="pa-2">
                    <MudStack Row="true">
                    <MudText>Waybills:</MudText>
                    @foreach (var waybill in latestSoapData.Waybills)
                    {
                        <MudText>@waybill</MudText>
                    }
                    </MudStack>
                </MudPaper>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>



<MudPaper Class="pa-0" Elevation="0" Square="true" Height="100%">
    <MudStack Row="true" Class="pa-0">
        <MudPaper Class="py-0" Width="@(size + "%")">
            <MudPaper Class="pa-4" Elevation="10" Square="true" Height="100%">
                <MudList Padding="true" T="SoapInterface" SelectionMode="SelectionMode.SingleSelection" SelectedValue="CurrentTab" SelectedValueChanged="OnTabChange">
                    @foreach (var tab in Tabs)
                    {
                        <MudListItem Class="pa-1 my-2" Value="@tab">
                            <MudStack Justify="Justify.SpaceBetween" Row="true">
                                <MudText Typo="Typo.h5" Style="overflow: hidden">@tab.CurrentMethod</MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => { RemoveTab(@tab); })"/>
                            </MudStack>
                        </MudListItem>
                    }
                </MudList>
                <MudStack>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="@(() => { AddTab(); })"/>
                </MudStack>
            </MudPaper>
        </MudPaper>
        <MudPaper Class="pa-6" Width="@(100-size + "%")">
            @if (CurrentTab is not null)
            {
                <SoapInterface @ref="CurrentTab" SharedSoapData="latestSoapData"/>
            }
            else
            {
                <MudText Typo="Typo.h3">Home</MudText>
            }
        </MudPaper>
    </MudStack>
    <MudSlider @bind-Value="size" Min="0" Max="100" Step="0.1" />
</MudPaper>

@code {
    
    public List<SoapInterface> Tabs = new();
    public SoapInterface CurrentTab;
    public double size = 20;

    sharedSoapData latestSoapData = new sharedSoapData();

    public class sharedSoapData
    {
        public string? SessionId;
        public List<string> Waybills = new List<string>();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Tabs.Add(new SoapInterface());
        CurrentTab = Tabs[0];
    }
    

    public void AddTab()
    {
        var tab = new SoapInterface();
        Tabs.Add(tab);
        StateHasChanged();
    }

    public void RemoveTab(SoapInterface tab)
    {
        Tabs.Remove(tab);
        StateHasChanged();
    }
    

    private void OnTabChange(SoapInterface tab)
    {
        Console.WriteLine(tab.id);
        CurrentTab = tab;
        Console.WriteLine(CurrentTab.CurrentMethod);
        StateHasChanged();
    }

}
