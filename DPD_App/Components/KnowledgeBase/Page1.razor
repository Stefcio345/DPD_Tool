@page "/KnowledgeBase/Page1"
@using System.Text.RegularExpressions
@inject IJSRuntime JS

<h2>Markdown Editor</h2>

<MudTextField @ref="textBox"
              InputId="MudInputText"
              Label="Markdown 2.0"
              Variant="Variant.Outlined"
              T="string"
              Value="text"
              ValueChanged="TextChanged"
              Immediate="true"
              Lines="5" />

<MudText>
    @((MarkupString)text)
</MudText>

<script>
    window.getCaretPosition = function (element) {
        return element.selectionStart;
    };

    window.setCaretPosition = function (element, caretPosition, markdownString) {
        const input = document.getElementById("MudInputText");
        input.setSelectionRange(caretPosition, caretPosition);
        input.innerHTML = markdownString;
    };
</script>

@code {
    MudTextField<string> textBox;
    private ElementReference inputRef;
    private bool isUpdating = false;
    private int caretPosition = 0;
    String text;
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        inputRef = textBox.InputReference.ElementReference;
        return base.OnAfterRenderAsync(firstRender);
    }

    private async void TextChanged(string obj)
    {
        if (isUpdating)
            return;
        // Flag as updating to prevent recursion
        isUpdating = true;
        
        // Get current caret position
        caretPosition = await JS.InvokeAsync<int>("getCaretPosition", inputRef);
        
        //Highlight text
        text = HighlightText(obj);
        //Update Textbox
        await textBox.SetText(text);
        
        // Restore the caret position
        await JS.InvokeVoidAsync("setCaretPosition", inputRef, caretPosition, text);
        // Allow further updates
        isUpdating = false;
    }

    string HighlightText(string text)
    {
        foreach (Match match in Regex.Matches(text, "<(.*)>"))
        {
            Console.WriteLine(match.ToString());
        }
        return text.ToUpper();
    }

}
