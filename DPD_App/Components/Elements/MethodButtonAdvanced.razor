@using MouseEvent = MudBlazor.MouseEvent

<MudMenuItem Class="px-1 py-0 my-0">
    <MudMenu ActivationEvent="MouseEvent.MouseOver" Label="@Method.Name" Style="justify-content: left; width: 100%"
             Variant="Variant.Filled" Color="@GetButtonColor(Method)"
             AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">

        <ActivatorContent>
            <MudButton Style="width: 100%; justify-content: left" Variant="Variant.Filled" OnClick="@(() => {Method.SelectedVariant = null; MethodSelected(Method); })" Color="@GetButtonColor(Method)">
                <MudText>
                    @Method.Name
                </MudText>
            </MudButton>
        </ActivatorContent>
        
        <ChildContent>
            @if(Method.Variants is not null)
            {
                @foreach (var variant in Method.Variants)
                {
                    <MudMenuItem Class="px-1 py-0 my-0">
                        <MudButton Style="justify-content: left; width: 100%" OnClick="@(() => { Method.SelectedVariant = variant; MethodSelected(Method); })" Variant="Variant.Filled" Color="@GetButtonColorVariant(variant)">
                            <MudText>
                                @variant
                            </MudText>
                        </MudButton>
                    </MudMenuItem>
                }
            }
        </ChildContent>
    </MudMenu>
</MudMenuItem>



@code
{
    [Parameter] public SoapApiMethod Method { get; set; }
    [Parameter] public SoapData Data { get; set; }
    [Parameter] public SoapInterface Parent { get; set; }
    [Parameter] public MudMenu ParentMenu { get; set; }

    private Color GetButtonColor(SoapApiMethod currentMethod)
    {
        return currentMethod.Type == Data.CurrentMethod.Type ? Color.Primary : Color.Default;
    }
    
    private Color GetButtonColorVariant(string variant)
    {
        return variant == Data.CurrentMethod.SelectedVariant ? Color.Primary : Color.Default;
    }
    
    private void MethodSelected(SoapApiMethod method)
    {
        Data.CurrentMethod = method;
        Parent.UpdateRequest();
        ParentMenu.CloseMenuAsync();
        StateHasChanged();
    }
}
