@using DPD_App.Models
@inject ISnackbar Snackbar

<style>
    .mud-table-cell:last-of-type .mud-tooltip-root:nth-of-type(1) .mud-svg-icon { fill: green; font-size: 1.5rem;}
    .mud-table-cell:last-of-type .mud-tooltip-root:nth-of-type(2) .mud-svg-icon { fill: red; font-size: 1.5rem;}
</style>

<MudTable Items="@Parcels" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Bordered="true" CanCancelEdit="true" 
          EditTrigger="TableEditTrigger.EditButton"
          RowEditPreview="BackupItem"
          OnCommitEditClick="@(() => Snackbar.Add("Changes have been saved", Severity.Success))"
          RowEditCancel="ResetItemToOriginalValues">
    <ColGroup>
        <col style="width: 5%;" />
        @if (dpdLQ)
        {
        <col style="width: 5%;"/>
        }
        <col style="width: 4%;" />
        <col style="width: 4%;" />
        <col style="width: 4%;" />
        <col style="width: 20%;" />
        <col style="width: 20%;" />
        <col style="width: 20%;" />
        <col style="width: 20%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Weight</MudTh>
        @if (dpdLQ)
        {
            <MudTh>Adr Weight</MudTh>
        }
        <MudTh>Width</MudTh>
        <MudTh>Height</MudTh>
        <MudTh>Depth</MudTh>
        <MudTh>Content</MudTh>
        <MudTh>Courier data 1</MudTh>
        <MudTh>Courier data 2</MudTh>
        <MudTh>Courier data 3</MudTh>
        <MudTh>
            <MudIconButton Class="px-9" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Size="Size.Medium" OnClick="AddPackage"/>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Weight">@context.Weight</MudTd>
        @if (dpdLQ)
        {
            <MudTd DataLabel="Adr Weight">@context.AdrWeight</MudTd>
        }
        <MudTd DataLabel="Width">@context.SizeX</MudTd>
        <MudTd DataLabel="Height">@context.SizeY</MudTd>
        <MudTd DataLabel="Depth">@context.SizeZ</MudTd>
        <MudTd DataLabel="Content">@context.Content</MudTd>
        <MudTd DataLabel="Courier data 1">@context.CustomerData1</MudTd>
        <MudTd DataLabel="Courier data 2">@context.CustomerData2</MudTd>
        <MudTd DataLabel="Courier data 3">@context.CustomerData3</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Weight">
            <MudTextField @bind-Value="@context.Weight"/>
        </MudTd>
        @if (dpdLQ)
        {
        <MudTd DataLabel="Adr Weight">
            <MudTextField @bind-Value="@context.AdrWeight"/>
        </MudTd>
        }
        <MudTd DataLabel="Width">
            <MudTextField @bind-Value="@context.SizeX"/>
        </MudTd>
        <MudTd DataLabel="Height">
            <MudTextField @bind-Value="@context.SizeY"/>
        </MudTd>
        <MudTd DataLabel="Depth">
            <MudTextField @bind-Value="@context.SizeZ"/>
        </MudTd>
        <MudTd DataLabel="Content">
            <MudTextField @bind-Value="@context.Content"/>
        </MudTd>
        <MudTd DataLabel="Courier data 1">
            <MudTextField @bind-Value="@context.CustomerData1"/>
        </MudTd>
        <MudTd DataLabel="Courier data 2">
            <MudTextField @bind-Value="@context.CustomerData2"/>
        </MudTd>
        <MudTd DataLabel="Courier data 3">
            <MudTextField @bind-Value="@context.CustomerData3"/>
        </MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
        <MudStack Justify="Justify.SpaceBetween" Row="true">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Info" Size="Size.Medium" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" OnClick="@((b) => { RemovePackage(button.Item); Snackbar.Add("An Item has been removed", Severity.Error); StateHasChanged(); })"/>
        </MudStack>
    </EditButtonContent>
</MudTable>
    
@code {
    [CascadingParameter] public List<Parcel> Parcels { get; set; }
    [CascadingParameter] public bool dpdLQ { get; set; }
    private Parcel ParcelBeforeEdit;
    
    //TODO Make edit buttons nice
    
    private void AddPackage()
    {
        Parcels.Add(new Parcel());
    }
    
    private void RemovePackage(object currentParcel)
    {
        var parcel = (Parcel)currentParcel;
        Parcels.Remove(parcel);
    }
    
    private void BackupItem(object element)
    {
        ParcelBeforeEdit = new Parcel()
        {
            Weight = ((Parcel)element).Weight,
            SizeX = ((Parcel)element).SizeX,
            SizeY = ((Parcel)element).SizeY,
            SizeZ = ((Parcel)element).SizeZ,
            Content = ((Parcel)element).Content,
            CustomerData1 = ((Parcel)element).CustomerData1,
            CustomerData2 = ((Parcel)element).CustomerData2,
            CustomerData3 = ((Parcel)element).CustomerData3,
        };
    }
    
    private void ResetItemToOriginalValues(object element)
    {
        ((Parcel)element).Weight = ParcelBeforeEdit.Weight;
        ((Parcel)element).SizeX = ParcelBeforeEdit.SizeX;
        ((Parcel)element).SizeY = ParcelBeforeEdit.SizeY;
        ((Parcel)element).SizeZ = ParcelBeforeEdit.SizeZ;
        ((Parcel)element).Content = ParcelBeforeEdit.Content;
        ((Parcel)element).CustomerData1 = ParcelBeforeEdit.CustomerData1;
        ((Parcel)element).CustomerData2 = ParcelBeforeEdit.CustomerData2;
        ((Parcel)element).CustomerData3 = ParcelBeforeEdit.CustomerData3;
    }
}