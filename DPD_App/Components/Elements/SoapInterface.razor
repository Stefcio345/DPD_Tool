@using System.Xml.Serialization
@using DPD_App.Components.Pages
@using DPD_App.Models

<Style>
    .my-editor-class { /* for a specific editor instance */
        height: 700px;
    }
</Style>

<MudGrid>
    <MudItem xs="6">
        <MudSelect T="API_METHODS" Value="CurrentMethod" Label="Select method" ValueChanged="MethodSelected">
            @foreach (API_METHODS item in Enum.GetValues(typeof(API_METHODS)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <MudSelect T="WsdlAddress" @bind-Value="WsdlAddress" Label="Select enviroment">
            @foreach (var wsdlAddres in Globals.WsdlAddresses)
            {
                <MudSelectItem Value="wsdlAddres">@wsdlAddres.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <StandaloneCodeEditor @ref="_requestEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsRequest"/>
    </MudItem>
    <MudItem xs="6">
        <StandaloneCodeEditor @ref="_responseEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsResponse"/>
    </MudItem>
    <MudItem xs="3">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendRequest">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Send</MudText>
            }
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudItem xs="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Prettify">Prettify</MudButton>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
        </MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" Class="pa-2 px-4" Color="Color.Success" StartIcon="@Icons.Material.Filled.Download" Disabled="@(DocumentData is null)" OnClick="DownloadData">Download Data</MudButton> 
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    //TODO add censoring of credentials
    //TODO add saving session ID and waybills
    //TODO maybe add downloading label
    //TODO Repair stuff
    static int ID = 0;
    public int id;
    [CascadingParameter] public Profile CurrentProfile { get; set; }
    [Parameter] public SoapApi.sharedSoapData SharedSoapData { get; set; }
    
    private StandaloneCodeEditor _requestEditor = new StandaloneCodeEditor();
    private StandaloneCodeEditor _responseEditor = new StandaloneCodeEditor();

    public API_METHODS CurrentMethod { get; set; }

    private string _request = "";

    public SoapInterface()
    {
        id = ID;
        ID += 1;
    }

    public string Request
    {
        get => _request;
        set
        {
            _request = value;
            _requestEditor.SetValue(value);
        }
    }

    private string _response = "";
    public string Response
    {
        get => _response;
        set
        {
            _response = value;
            _responseEditor.SetValue(value);
        }
    }

    public WsdlAddress WsdlAddress { get; set; }
    
    public string? DocumentData { get; set; }
    
    private bool _processing = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (WsdlAddress is null) WsdlAddress = CurrentProfile.WsdlAddress;
        if (Request == "") UpdateRequest();
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentMethod = API_METHODS.GeneratePackagesNumbers;
        UpdateRequest();
    }

    async Task SendRequest()
    {
        _processing = true;
        var response = await DPD_App.NetworkService.SendSoapRequest(WsdlAddress.Address, Request);
        
        //Deserialize repsonse
        Envelope result;
        var envelopeSerializer = new XmlSerializer(typeof(Envelope));

        using var reader = new StringReader(response);
        result = (Envelope)envelopeSerializer.Deserialize(reader)!;

        if (result.Body.GeneratePackagesNumbersV9Response is not null)
        {
            SharedSoapData.SessionId = result.Body.GeneratePackagesNumbersV9Response.Return.SessionId.ToString();
            if(result.Body.GeneratePackagesNumbersV9Response.Return.Packages.Package.Parcels is not null)
                SharedSoapData.Waybills.Clear();
                foreach (var parcel in result.Body.GeneratePackagesNumbersV9Response.Return.Packages.Package.Parcels.Parcel)
                {
                    SharedSoapData.Waybills.Add(parcel.Waybill);
                }
        }

        if (result.Body.GenerateSpedLabelsV4Response is not null)
        {
            DocumentData = result.Body.GenerateSpedLabelsV4Response.Return.DocumentData;
        }

        if (result.Body.GenerateProtocolV2Response is not null)
        {
            DocumentData = result.Body.GenerateProtocolV2Response.Return.DocumentData;
        }

        Response = XMLService.Prettify(response);
        _processing = false;
        StateHasChanged();
    }
    
    async Task Prettify()
    {
        Request = XMLService.Prettify(Request);
        Response = XMLService.Prettify(Response);
        StateHasChanged();
    }
    
    private void MethodSelected(API_METHODS obj)
    {
        CurrentMethod = obj;
        UpdateRequest();
        Response = "";
        StateHasChanged();
    }

    public async void UpdateRequest()
    {
        switch (CurrentMethod)
        {
            case API_METHODS.GeneratePackagesNumbers:
                var packagesNumbersV9 = new GeneratePackagesNumbersV9();
                packagesNumbersV9.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = packagesNumbersV9.CreateSoapEnvelope();
                break;
            case API_METHODS.GenerateSpedLabels:
                var spedLabelsV4 = new GenerateSpedLabelsV4();
                if (SharedSoapData.SessionId is not null)
                {
                    spedLabelsV4.DpdServicesParamsV1.Session.SessionId = SharedSoapData.SessionId;
                    spedLabelsV4.DpdServicesParamsV1.Session.Packages = null;
                }
                spedLabelsV4.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = spedLabelsV4.CreateSoapEnvelope();
                break;
            case API_METHODS.GenerateProtocol:
                var generateProtocolV2 = new GenerateProtocolV2();
                if (SharedSoapData.SessionId is not null)
                {
                    generateProtocolV2.DpdServicesParamsV1.Session.SessionId = SharedSoapData.SessionId;
                    generateProtocolV2.DpdServicesParamsV1.Session.Packages = null;
                }
                generateProtocolV2.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateProtocolV2.CreateSoapEnvelope();
                break;
            case API_METHODS.GenerateInternationalPackageNumbers:
                var generateInternationalPackageNumbers = new GenerateInternationalPackageNumbersV1();
                generateInternationalPackageNumbers.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateInternationalPackageNumbers.CreateSoapEnvelope();
                break;
            case API_METHODS.FindPostalCode:
                var findPostalCodeV1 = new FindPostalCodeV1();
                findPostalCodeV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = findPostalCodeV1.CreateSoapEnvelope();
                break;
            case API_METHODS.GetCourierOrderAvailability:
                var getCourierOrderAvailabilityV1 = new GetCourierOrderAvailabilityV1();
                getCourierOrderAvailabilityV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = getCourierOrderAvailabilityV1.CreateSoapEnvelope();
                break;
            default:
                Request = "Method currently not implemented";
                break; 
        }
        Request = XMLService.Prettify(Request);
    }

    private void DownloadData()
    {
        Console.WriteLine(DocumentData);
    }

    private async void RequestChanged()
    {
        if(Request != await _requestEditor.GetValue()) Request = await _requestEditor.GetValue();
        StateHasChanged();
    }

    private async void ResponseChanged()
    {
        if(Response != await _responseEditor.GetValue()) Response = await _responseEditor.GetValue();
        StateHasChanged();
    }
    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsRequest(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Request,
            Minimap = new EditorMinimapOptions(){Enabled = false},
        };
    }
    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsResponse(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Response,
            Minimap = new EditorMinimapOptions(){Enabled = false},
        };
    }

    String getRequest()
    {
        var str = _requestEditor.GetValue();
        Console.WriteLine(str);
        if (str is null) return "";
        return str.ToString();
    }
    
    string getResponse()
    {
        var str = _responseEditor.GetValue();
        Console.WriteLine(str);
        if (str is null) return "";
        return str.ToString();
    }
    
}