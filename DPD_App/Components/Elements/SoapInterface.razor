@using System.Collections.Specialized
@using System.ComponentModel.Design
@using System.Xml.Serialization
@using DPD_App.Components.Pages
@using DPD_App.Models
@using Microsoft.Extensions.Logging.Console
@using MouseEvent = MudBlazor.MouseEvent
@inject ISnackbar Snackbar

<Style>
    .my-editor-class { /* for a specific editor instance */
        height: 100%;
    }
</Style>

<MudGrid>
    <!-- BUTTONS -->
    <MudItem xs="12">
        <MudPaper Elevation="5" Class="mb-2 pa-2">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="2" Class="d-flex justify-start flex-grow-1 gap-4">
                    <MudStack Row="true">
                        <MudButton Size="Size.Large" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendRequest">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Send</MudText>
                            }
                        </MudButton>
                        <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" OnClick="Prettify">Prettify</MudButton>
                    </MudStack>
                </MudItem>
                
                <MudItem xs="8" Class="d-flex justify-center flex-grow-1 gap-4 px-0">
                    @if (Data.CurrentMethod.Type == SOAP_API_METHODS.EMPTY)
                    {
                        <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Error" OnClick="() => { _open = !_open;}">Select API Method</MudButton>
                        <MudPopover Open="_open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                            <ChooseSoapMethod Data="Data" Parent="this" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"/>
                        </MudPopover>
                    }
                    else
                    {
                        <ChooseSoapMethod Data="Data" Parent="this" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"/>
                    }
                </MudItem>
                
                <MudItem xs="2" Class="d-flex justify-end flex-grow-1 gap-4">
                    <MudStack Row="true">
                        <!-- enviroment choose -->
                        <MudButtonGroup DropShadow="true" Color="Color.Success" Size="Size.Large" Variant="Variant.Filled" OverrideStyles="false">
                            @foreach (var wsdlAddres in Globals.WsdlAddresses)
                            {
                                <MudButton OnClick="@(() => { WsdlAddress = wsdlAddres; })" Variant="@GetEnviromentButtonVariant(wsdlAddres)" Color="@GetEnviromentButtonColor(wsdlAddres)">@wsdlAddres.Name</MudButton>
                            }
                        </MudButtonGroup>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="RefreshData" Variant="Variant.Filled" Size="Size.Large"/>
                    </MudStack>
                </MudItem>

            </MudGrid>
        </MudPaper>
    </MudItem>
    
    <!-- EDITORS -->
    <MudItem xs="12">
        <MudPaper Height="800px" Class="px-3 pb-3 pt-0">
            <MudGrid Style="height: 100%">
                <MudItem xs="6" Class="pt-2 pr-2" Style="height: 100%">
                    <StandaloneCodeEditor @ref="_requestEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsRequest" OnDidChangeModelContent="RequestChanged"/>
                </MudItem>
                <MudItem xs="6" Class="pt-2 pl-2" Style="height: 100%">
                    <StandaloneCodeEditor @ref="_responseEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsResponse" OnDidChangeModelContent="ResponseChanged"/>
                    <MudIconButton Style="position: absolute; right: 56px; bottom: 25px" Size="Size.Large" Variant="Variant.Filled" Color="Color.Success" Icon="@Icons.Material.Filled.Download" Disabled="@(DocumentData is null)" OnClick="DownloadData"/>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{

    private bool _open;
    //TODO Remove this when they patch MudBlazor, and add menu type hover
}

@code {

    private StandaloneCodeEditor? _requestEditor;
    private StandaloneCodeEditor? _responseEditor;
    
    [CascadingParameter] public Profile CurrentProfile { get; set; }
    [Parameter] public SoapData Data { get; set; }
    
    public SoapApiMethod CurrentMethod
    {
        get => Data.CurrentMethod;
        set => Data.CurrentMethod = value;
    }

    public WsdlAddress WsdlAddress
    {
        get => Data.WsdlAddress;
        set => Data.WsdlAddress = value;
    }

    public string Request
    {
        get => Data.Request;
        set => Data.Request = value;
    }
    
    public string Response
    {
        get => Data.Response;
        set => Data.Response = value;
    }
    
    public string? DocumentData
    {
        get => Data.DocumentData;
        set => Data.DocumentData = value; 
    }

    public SessionData SessionData { get; set; } = new SessionData();
    
    private bool _processing = false;

    async Task SendRequest()
    {
        _processing = true;
        var response = await DPD_App.NetworkService.SendSoapRequest(WsdlAddress.GetAddress(CurrentMethod.System), Request);
        
        //Deserialize repsonse
        Envelope result;
        var envelopeSerializer = new XmlSerializer(typeof(Envelope));

        using var reader = new StringReader(response);
        result = (Envelope)envelopeSerializer.Deserialize(reader)!;

        //If has Package details, save them
        if (result.Body.GeneratePackagesNumbersV9Response is not null)
        {
            SavePackageDetails(result.Body.GeneratePackagesNumbersV9Response, GetSessionType(Request));
        }
        if (result.Body.AppendParcelsToPackageV2Response is not null)
        {
            SavePackageDetails(result.Body.AppendParcelsToPackageV2Response, GetSessionType(Request));
        }
        if (result.Body.GenerateInternationalPackageNumbersV1Response is not null)
        {
            AddParcelToSavedDetails(result.Body.GenerateInternationalPackageNumbersV1Response);
        }

        //If has document data save it in variable
        if (result.Body.GenerateSpedLabelsV4Response is not null)
        {
            DocumentData = result.Body.GenerateSpedLabelsV4Response.Return.DocumentData;
        }

        if (result.Body.GenerateProtocolV2Response is not null)
        {
            DocumentData = result.Body.GenerateProtocolV2Response.Return.DocumentData;
        }
        
        if (result.Body.GenerateDomesticReturnLabelV1Response is not null)
        {
            DocumentData = result.Body.GenerateDomesticReturnLabelV1Response.Return.DocumentData;
        }
        
        if (result.Body.GenerateReturnLabelV1Response is not null)
        {
            DocumentData = result.Body.GenerateReturnLabelV1Response.Return.DocumentData;
        }

        Response = XMLService.Prettify(response);
        _responseEditor?.SetValue(LoggingService.ShortenDocumentData(Response));
        _processing = false;
        StateHasChanged();
    }

    Task Prettify()
    {
        Request = XMLService.Prettify(Request);
        Response = XMLService.Prettify(Response);
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void DownloadData()
    {
        var name = "";
        if (SessionData is not null) name = SessionData.Packages.Parcels[0].Waybill; 
        var filename = FileService.SaveBase64ToPDF(DocumentData, PrintType.Custom, name);
        Snackbar.Add(builder =>
            {
                builder.OpenElement(0, "span");
                builder.AddContent(1, "File successfully downloaded: ");
                builder.OpenElement(2, "a");
                builder.AddAttribute(3, "href", $"/pdfs/{filename}");
                builder.AddAttribute(4, "target", "_blank");
                builder.AddContent(5, $"{filename}");
                builder.CloseElement();
                builder.CloseElement();
            }, 
            Severity.Success);
    }
    
    public async void UpdateRequest()
    {
        switch (CurrentMethod.Type)
        {
            case SOAP_API_METHODS.GeneratePackagesNumbers:
                var packagesNumbersV9 = new GeneratePackagesNumbersV9();
                packagesNumbersV9.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = packagesNumbersV9.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateSpedLabels:
                var spedLabelsV4 = new GenerateSpedLabelsV4();
                spedLabelsV4.DpdServicesParamsV1.Session.SessionId = SessionData.SessionId;
                spedLabelsV4.DpdServicesParamsV1.Session.SessionType = SessionData.SessionType.ToString();
                spedLabelsV4.DpdServicesParamsV1.Session.Packages.PackageId = SessionData.Packages.PackageId;
                if (SessionData.SessionId is not null) spedLabelsV4.DpdServicesParamsV1.Session.Packages.Parcels = new List<ParcelsXml>();
                foreach (var parcelData in SessionData.Packages.Parcels)
                {
                    spedLabelsV4.DpdServicesParamsV1.Session.Packages.Parcels.Add(new ParcelsXml(CallTypes.LABEL, parcelData.Waybill)); 
                }
                spedLabelsV4.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = spedLabelsV4.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateProtocol:
                var generateProtocolV2 = new GenerateProtocolV2();
                generateProtocolV2.DpdServicesParamsV1.Session.SessionId = SessionData.SessionId;
                generateProtocolV2.DpdServicesParamsV1.Session.SessionType = SessionData.SessionType.ToString();
                generateProtocolV2.DpdServicesParamsV1.Session.Packages.PackageId = SessionData.Packages.PackageId;
                if (SessionData is not null) generateProtocolV2.DpdServicesParamsV1.Session.Packages.Parcels = new List<ParcelsXml>();
                foreach (var parcelData in SessionData.Packages.Parcels)
                {
                    generateProtocolV2.DpdServicesParamsV1.Session.Packages.Parcels.Add(new ParcelsXml(CallTypes.LABEL, parcelData.Waybill)); 
                }
                generateProtocolV2.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateProtocolV2.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateInternationalPackageNumbers:
                var generateInternationalPackageNumbers = new GenerateInternationalPackageNumbersV1();
                generateInternationalPackageNumbers.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateInternationalPackageNumbers.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.FindPostalCode:
                var findPostalCodeV1 = new FindPostalCodeV1();
                findPostalCodeV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = findPostalCodeV1.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GetCourierOrderAvailability:
                var getCourierOrderAvailabilityV1 = new GetCourierOrderAvailabilityV1();
                getCourierOrderAvailabilityV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = getCourierOrderAvailabilityV1.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateDomesticReturnLabel:
                var generateDomesticReturnLabel = new GenerateDomesticReturnLabelV1();
                if (SessionData.Packages.Parcels.Count > 0) generateDomesticReturnLabel.ReturnedWaybillsV1.Waybill = new List<string>();
                foreach (var parcelData in SessionData.Packages.Parcels)
                {
                    generateDomesticReturnLabel.ReturnedWaybillsV1.Waybill.Add(parcelData.Waybill); 
                }
                generateDomesticReturnLabel.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateDomesticReturnLabel.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateReturnLabel:
                var GenerateReturnLabelV1 = new GenerateReturnLabelV1();
                if (SessionData.Packages.Parcels.Count > 0) GenerateReturnLabelV1.ReturnedWaybillsV1.Waybill = new List<string>();
                foreach (var parcelData in SessionData.Packages.Parcels)
                {
                    GenerateReturnLabelV1.ReturnedWaybillsV1.Waybill.Add(parcelData.Waybill); 
                }
                GenerateReturnLabelV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = GenerateReturnLabelV1.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.AppendParcelsToPackage:
                var AppendParcelsToPackageV2 = new AppendParcelsToPackageV2();
                //If package was generated add to this method
                if (SessionData.Packages.Parcels.Count > 0) AppendParcelsToPackageV2.ParcelsAppend.PackagesearchCriteria.Waybill = SessionData.Packages.Parcels.First().Waybill;
                AppendParcelsToPackageV2.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = AppendParcelsToPackageV2.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.PackagesPickupCall:
                PackagesPickupCallV4 PackagesPickupCallV4 = CurrentMethod.SelectedVariant switch
                {
                    "UPDATE" => new PackagesPickupCallV4(PICKUP_OPERATION_TYPES.UPDATE),
                    "CANCEL" => new PackagesPickupCallV4(PICKUP_OPERATION_TYPES.CANCEL),
                    "INSERT" => new PackagesPickupCallV4(PICKUP_OPERATION_TYPES.INSERT),
                    _ => new PackagesPickupCallV4(PICKUP_OPERATION_TYPES.INSERT)
                };
                PackagesPickupCallV4.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = PackagesPickupCallV4.CreateSoapEnvelope();
                break;
            default:
                Request = "Method currently not implemented";
                break; 
        }
        Request = XMLService.Prettify(Request);
        Response = "";
        
        if(_requestEditor is not null) await _requestEditor.SetValue(Request);
    }

    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsRequest(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Request,
            Minimap = new EditorMinimapOptions(){Enabled = false},
            StickyScroll = new EditorStickyScrollOptions(){ScrollWithEditor = false, Enabled = true},
            ScrollBeyondLastLine = false,
            MouseWheelZoom = false,
            MouseWheelScrollSensitivity = 1,
            Scrollbar = new EditorScrollbarOptions(){AlwaysConsumeMouseWheel = false},
        };
    }
    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsResponse(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Response,
            Minimap = new EditorMinimapOptions(){Enabled = false},
            StickyScroll = new EditorStickyScrollOptions(){ScrollWithEditor = false, Enabled = true},
            ScrollBeyondLastLine = false,
            MouseWheelZoom = false,
            MouseWheelScrollSensitivity = 1,
            Scrollbar = new EditorScrollbarOptions(){AlwaysConsumeMouseWheel = false},
            ReadOnly = true,
        };
    }
    
    private async void RequestChanged()
    {
        if(Request != await _requestEditor.GetValue()) Request = await _requestEditor.GetValue();
        StateHasChanged();
    }

    private async void ResponseChanged()
    {
        if(Response != await _responseEditor.GetValue()) Response = await _responseEditor.GetValue();
        StateHasChanged();
    }
    
    // This method is called when parameters are set or updated
    protected override async void OnParametersSet()
    {
        await base.OnParametersSetAsync();
        if (Data.Update)
        {
            // Ensure editors are updated when Data changes
            if(_requestEditor is not null) await _requestEditor.SetValue(XMLService.Prettify(Request));
            if(_responseEditor is not null) await _responseEditor.SetValue(XMLService.Prettify(Response));
            if(Request.Length < 1) UpdateRequest();
            Data.Update = false;
            _open = false;
        }
    }

    private void RefreshData(MouseEventArgs obj)
    {
        UpdateRequest();
        StateHasChanged();
    }

    private Color GetEnviromentButtonColor(WsdlAddress wsdlAddres)
    {
        return wsdlAddres.Name == WsdlAddress.Name ? Color.Primary : Color.Default;
    }
    
    private Variant GetEnviromentButtonVariant(WsdlAddress wsdlAddres)
    {
        return wsdlAddres.Name == WsdlAddress.Name ? Variant.Filled : Variant.Text;
    }

    private void SavePackageDetails(IReturnable packageReturn, SESSION_TYPE sessionType)
    {
        if (packageReturn.Return.Status != "OK") return;
        //Save Package Details
        SessionData = new SessionData();
        SessionData.SessionType = sessionType;
        SessionData.SessionId = packageReturn.Return.SessionId;
        SessionData.Packages.PackageId = packageReturn.Return.Packages.Package.PackageId;
        foreach (var parcel in packageReturn.Return.Packages.Package.Parcels.Parcel)
        {
            SessionData.Packages.Parcels.Add(new ParcelData()
            {
                ParcelId = parcel.ParcelId,
                Waybill = parcel.Waybill
            });
        }
    }
    
    private void AddParcelToSavedDetails(IReturnable packageReturn)
    {
        if (packageReturn.Return.Status != "OK") return;
        if (packageReturn.Return.Parcels.Count <= 0) return;
        //Append to Package
        foreach (var parcel in packageReturn.Return.Parcels)
        {
            SessionData.Packages.Parcels.Add(new ParcelData()
            {
                ParcelId = parcel.ParcelId,
                Waybill = parcel.Waybill
            });
        }
    }
    
    private SESSION_TYPE GetSessionType(string request)
    {
        var serializer = new XmlSerializer(typeof(Envelope));
        using var reader = new StringReader(request);
        var requestDeserialized = (Envelope)serializer.Deserialize(reader);
        
        if (requestDeserialized.Body.GeneratePackagesNumbersV9 is not null)
        {
            return requestDeserialized.Body.GeneratePackagesNumbersV9.OpenUMLFeV11.Packages.Receiver.CountryCode != requestDeserialized.Body.GeneratePackagesNumbersV9.OpenUMLFeV11.Packages.Sender.CountryCode ? SESSION_TYPE.INTERNATIONAL : SESSION_TYPE.DOMESTIC;
        }
        else if (requestDeserialized.Body.GenerateInternationalPackageNumbersV1 is not null)
        {
            return requestDeserialized.Body.GenerateInternationalPackageNumbersV1.InternationalOpenUMLFeV1.Packages.Receiver.CountryCode != requestDeserialized.Body.GenerateInternationalPackageNumbersV1.InternationalOpenUMLFeV1.Packages.Sender.CountryCode ? SESSION_TYPE.INTERNATIONAL : SESSION_TYPE.DOMESTIC;
        }
        return SESSION_TYPE.DOMESTIC;
    }

}