@using System.Collections.Specialized
@using System.Xml.Serialization
@using DPD_App.Components.Pages
@using DPD_App.Models
@inject ISnackbar Snackbar

<Style>
    .my-editor-class { /* for a specific editor instance */
        height: 100%;
    }
</Style>

<MudGrid>
    <!-- BUTTONS -->
    <MudItem xs="12">
        <MudPaper Elevation="5" Class="mb-2 pa-2">
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudButton Size="Size.Large" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendRequest">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Send</MudText>
                    }
                </MudButton>

                <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" OnClick="Prettify">Prettify</MudButton>
                
                <ChooseSoapMethod Data="Data" Parent="this"/>

                <MudIconButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Success" Icon="@Icons.Material.Filled.Download" Disabled="@(DocumentData is null)" OnClick="DownloadData"></MudIconButton>

                <MudStack Row="true">
                    <!-- enviroment choose -->
                    <MudButtonGroup DropShadow="true" Color="Color.Success" Size="Size.Large" Variant="Variant.Filled" OverrideStyles="false">
                        @foreach (var wsdlAddres in Globals.WsdlAddresses)
                        {
                        <MudButton OnClick="@(() => { WsdlAddress = wsdlAddres; })" Variant="@GetEnviromentButtonVariant(wsdlAddres)" Color="@GetEnviromentButtonColor(wsdlAddres)">@wsdlAddres.Name</MudButton>
                        }
                    </MudButtonGroup>
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="RefreshData" Variant="Variant.Filled" Size="Size.Large"/>
                </MudStack>
                
                </MudStack>
        </MudPaper>
    </MudItem>
    
    <!-- EDITORS -->
    <MudItem xs="12">
        <MudPaper Height="800px" Class="px-3 pb-3 pt-0">
            <MudGrid Style="height: 100%">
                <MudItem xs="6" Class="pt-2 pr-2">
                    <StandaloneCodeEditor @ref="_requestEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsRequest" OnDidChangeModelContent="RequestChanged"/>
                </MudItem>
                <MudItem xs="6" Class="pt-2 pl-2">
                    <StandaloneCodeEditor @ref="_responseEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsResponse" OnDidChangeModelContent="ResponseChanged"/>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {

    private StandaloneCodeEditor? _requestEditor;
    private StandaloneCodeEditor? _responseEditor;
    
    [CascadingParameter] public Profile CurrentProfile { get; set; }
    [Parameter] public SoapData Data { get; set; }
    
    public SOAP_API_METHODS CurrentMethod
    {
        get => Data.CurrentMethod;
        set => Data.CurrentMethod = value;
    }

    public WsdlAddress WsdlAddress
    {
        get => Data.WsdlAddress;
        set => Data.WsdlAddress = value;
    }
    
    public API_SYSTEM CurrentSystem
    {
        get => Data.CurrentSystem;
        set => Data.CurrentSystem = value;
    }

    public string Request
    {
        get => Data.Request;
        set => Data.Request = value;
    }
    
    public string Response
    {
        get => Data.Response;
        set => Data.Response = value;
    }
    
    public string? DocumentData
    {
        get => Data.DocumentData;
        set => Data.DocumentData = value; 
    }

    public SessionData SessionData { get; set; } = new SessionData();
    
    private bool _processing = false;

    async Task SendRequest()
    {
        _processing = true;
        var response = await DPD_App.NetworkService.SendSoapRequest(WsdlAddress.GetAddress(CurrentSystem), Request);
        
        //Deserialize repsonse
        Envelope result;
        var envelopeSerializer = new XmlSerializer(typeof(Envelope));

        using var reader = new StringReader(response);
        result = (Envelope)envelopeSerializer.Deserialize(reader)!;

        //If has Package details, save them
        if (result.Body.GeneratePackagesNumbersV9Response is not null)
        {
            if (result.Body.GeneratePackagesNumbersV9Response.Return.Status == "OK")
            {
                SessionData = new SessionData();
                SessionData.SessionId = result.Body.GeneratePackagesNumbersV9Response.Return.SessionId;
                SessionData.Packages.PackageId = result.Body.GeneratePackagesNumbersV9Response.Return.Packages.Package.PackageId;
                foreach (var parcel in result.Body.GeneratePackagesNumbersV9Response.Return.Packages.Package.Parcels.Parcel)
                {
                    SessionData.Packages.Parcels.Add(new ParcelData()
                    {
                        ParcelId = parcel.ParcelId,
                        Waybill = parcel.Waybill
                    });
                }
            }
        }

        //If has document data save it in variable
        if (result.Body.GenerateSpedLabelsV4Response is not null)
        {
            DocumentData = result.Body.GenerateSpedLabelsV4Response.Return.DocumentData;
        }

        if (result.Body.GenerateProtocolV2Response is not null)
        {
            DocumentData = result.Body.GenerateProtocolV2Response.Return.DocumentData;
        }
        
        if (result.Body.GenerateDomesticReturnLabelV1Response is not null)
        {
            DocumentData = result.Body.GenerateDomesticReturnLabelV1Response.Return.DocumentData;
        }

        Response = XMLService.Prettify(response);
        _responseEditor?.SetValue(LoggingService.ShortenDocumentData(Response));
        _processing = false;
        StateHasChanged();
    }

    Task Prettify()
    {
        Request = XMLService.Prettify(Request);
        Response = XMLService.Prettify(Response);
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void DownloadData()
    {
        var name = "";
        if (SessionData is not null) name = SessionData.Packages.Parcels[0].Waybill; 
        var filename = FileService.SaveBase64ToPDF(DocumentData, PrintType.Custom, name);
        Snackbar.Add(builder =>
            {
                builder.OpenElement(0, "span");
                builder.AddContent(1, "File successfully downloaded: ");
                builder.OpenElement(2, "a");
                builder.AddAttribute(3, "href", $"/pdfs/{filename}");
                builder.AddAttribute(4, "target", "_blank");
                builder.AddContent(5, $"{filename}");
                builder.CloseElement();
                builder.CloseElement();
            }, 
            Severity.Success);
    }
    
    public async void UpdateRequest()
    {
        switch (CurrentMethod)
        {
            case SOAP_API_METHODS.GeneratePackagesNumbers:
                var packagesNumbersV9 = new GeneratePackagesNumbersV9();
                packagesNumbersV9.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = packagesNumbersV9.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateSpedLabels:
                var spedLabelsV4 = new GenerateSpedLabelsV4();
                spedLabelsV4.DpdServicesParamsV1.Session.SessionId = SessionData.SessionId;
                spedLabelsV4.DpdServicesParamsV1.Session.Packages.PackageId = SessionData.Packages.PackageId;
                if (SessionData.SessionId is not null) spedLabelsV4.DpdServicesParamsV1.Session.Packages.Parcels = new List<ParcelsXml>();
                foreach (var parcelData in SessionData.Packages.Parcels)
                {
                    spedLabelsV4.DpdServicesParamsV1.Session.Packages.Parcels.Add(new ParcelsXml(CallTypes.LABEL, parcelData.Waybill)); 
                }
                spedLabelsV4.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = spedLabelsV4.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateProtocol:
                var generateProtocolV2 = new GenerateProtocolV2();
                generateProtocolV2.DpdServicesParamsV1.Session.SessionId = SessionData.SessionId;
                generateProtocolV2.DpdServicesParamsV1.Session.Packages.PackageId = SessionData.Packages.PackageId;
                if (SessionData is not null) generateProtocolV2.DpdServicesParamsV1.Session.Packages.Parcels = new List<ParcelsXml>();
                foreach (var parcelData in SessionData.Packages.Parcels)
                {
                    generateProtocolV2.DpdServicesParamsV1.Session.Packages.Parcels.Add(new ParcelsXml(CallTypes.LABEL, parcelData.Waybill)); 
                }
                generateProtocolV2.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateProtocolV2.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateInternationalPackageNumbers:
                var generateInternationalPackageNumbers = new GenerateInternationalPackageNumbersV1();
                generateInternationalPackageNumbers.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateInternationalPackageNumbers.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.FindPostalCode:
                var findPostalCodeV1 = new FindPostalCodeV1();
                findPostalCodeV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = findPostalCodeV1.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GetCourierOrderAvailability:
                var getCourierOrderAvailabilityV1 = new GetCourierOrderAvailabilityV1();
                getCourierOrderAvailabilityV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = getCourierOrderAvailabilityV1.CreateSoapEnvelope();
                break;
            case SOAP_API_METHODS.GenerateDomesticReturnLabel:
                var generateDomesticReturnLabel = new GenerateDomesticReturnLabelV1();
                if (SessionData.Packages.Parcels.Count > 0) generateDomesticReturnLabel.ReturnedWaybillsV1.Waybill = new List<string>();
                foreach (var parcelData in SessionData.Packages.Parcels)
                {
                    generateDomesticReturnLabel.ReturnedWaybillsV1.Waybill.Add(parcelData.Waybill); 
                }
                generateDomesticReturnLabel.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateDomesticReturnLabel.CreateSoapEnvelope();
                break;
            default:
                Request = "Method currently not implemented";
                break; 
        }
        Request = XMLService.Prettify(Request);
        Response = "";
        
        if(_requestEditor is not null) await _requestEditor.SetValue(Request);
    }

    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsRequest(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Request,
            Minimap = new EditorMinimapOptions(){Enabled = false},
            StickyScroll = new EditorStickyScrollOptions(){ScrollWithEditor = false, Enabled = true},
            ScrollBeyondLastLine = false,
            MouseWheelZoom = false,
            MouseWheelScrollSensitivity = 1,
            Scrollbar = new EditorScrollbarOptions(){AlwaysConsumeMouseWheel = false},
        };
    }
    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsResponse(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Response,
            Minimap = new EditorMinimapOptions(){Enabled = false},
            StickyScroll = new EditorStickyScrollOptions(){ScrollWithEditor = false, Enabled = true},
            ScrollBeyondLastLine = false,
            MouseWheelZoom = false,
            MouseWheelScrollSensitivity = 1,
            Scrollbar = new EditorScrollbarOptions(){AlwaysConsumeMouseWheel = false},
            ReadOnly = true,
        };
    }
    
    private async void RequestChanged()
    {
        if(Request != await _requestEditor.GetValue()) Request = await _requestEditor.GetValue();
        StateHasChanged();
    }

    private async void ResponseChanged()
    {
        if(Response != await _responseEditor.GetValue()) Response = await _responseEditor.GetValue();
        StateHasChanged();
    }
    
    // This method is called when parameters are set or updated
    protected override async void OnParametersSet()
    {
        await base.OnParametersSetAsync();
        if (Data.Update)
        {
            // Ensure editors are updated when Data changes
            if(_requestEditor is not null) await _requestEditor.SetValue(XMLService.Prettify(Request));
            if(_responseEditor is not null) await _responseEditor.SetValue(XMLService.Prettify(Response));
            if(Request.Length < 1) UpdateRequest();
            Data.Update = false;
        }
    }

    private void RefreshData(MouseEventArgs obj)
    {
        UpdateRequest();
        StateHasChanged();
    }

    private Color GetEnviromentButtonColor(WsdlAddress wsdlAddres)
    {
        return wsdlAddres.Name == WsdlAddress.Name ? Color.Primary : Color.Default;
    }
    
    private Variant GetEnviromentButtonVariant(WsdlAddress wsdlAddres)
    {
        return wsdlAddres.Name == WsdlAddress.Name ? Variant.Filled : Variant.Text;
    }

}