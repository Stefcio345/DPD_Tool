@using System.Collections.Specialized
@using System.Xml.Serialization
@using DPD_App.Components.Pages
@using DPD_App.Models

<Style>
    .my-editor-class { /* for a specific editor instance */
        height: 700px;
    }
</Style>

<MudGrid>
    <MudItem xs="6">
        <MudSelect T="API_METHODS" Value="CurrentMethod" Label="Select method" ValueChanged="MethodSelected">
            @foreach (API_METHODS item in Enum.GetValues(typeof(API_METHODS)))
            {
            <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <MudSelect T="WsdlAddress" @bind-Value="WsdlAddress" Label="Select enviroment">
            @foreach (var wsdlAddres in Globals.WsdlAddresses)
            {
            <MudSelectItem Value="wsdlAddres">@wsdlAddres.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <StandaloneCodeEditor @ref="_requestEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsRequest" OnDidChangeModelContent="RequestChanged"/>
    </MudItem>
    <MudItem xs="6">
        <StandaloneCodeEditor @ref="_responseEditor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptionsResponse" OnDidChangeModelContent="ResponseChanged"/>
    </MudItem>
    <MudItem xs="3">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendRequest">
            @if (_processing)
            {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
            <MudText>Send</MudText>
            }
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudItem xs="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Prettify">Prettify</MudButton>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
        </MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" Class="pa-2 px-4" Color="Color.Success" StartIcon="@Icons.Material.Filled.Download" Disabled="@(DocumentData is null)" OnClick="DownloadData">Download Data</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {

    private StandaloneCodeEditor? _requestEditor;
    private StandaloneCodeEditor? _responseEditor;
    
    [CascadingParameter] public Profile CurrentProfile { get; set; }
    [Parameter] public SoapData Data { get; set; }
    
    public API_METHODS CurrentMethod
    {
        get => Data.CurrentMethod;
        set => Data.CurrentMethod = value;
    }

    public WsdlAddress? WsdlAddress
    {
        get => Data.WsdlAddress;
        set => Data.WsdlAddress = value;
    }

    public string Request
    {
        get => Data.Request;
        set => Data.Request = value;
    }
    
    public string Response
    {
        get => Data.Response;
        set => Data.Response = value;
    }
    
    public string? DocumentData { get; set; }
    
    private bool _processing = false;

    async Task SendRequest()
    {
        _processing = true;
        var response = await DPD_App.NetworkService.SendSoapRequest(WsdlAddress.Address, Request);
        
        //Deserialize repsonse
        Envelope result;
        var envelopeSerializer = new XmlSerializer(typeof(Envelope));

        using var reader = new StringReader(response);
        result = (Envelope)envelopeSerializer.Deserialize(reader)!;

        if (result.Body.GenerateSpedLabelsV4Response is not null)
        {
            DocumentData = result.Body.GenerateSpedLabelsV4Response.Return.DocumentData;
        }

        if (result.Body.GenerateProtocolV2Response is not null)
        {
            DocumentData = result.Body.GenerateProtocolV2Response.Return.DocumentData;
        }

        Response = XMLService.Prettify(response);
        if(_responseEditor is not null) await _responseEditor.SetValue(Response);
        _processing = false;
        StateHasChanged();
    }
    
    async Task Prettify()
    {
        Request = XMLService.Prettify(Request);
        Response = XMLService.Prettify(Response);
        StateHasChanged();
    }
    
    private void DownloadData()
    {
        Console.WriteLine(DocumentData);
    }

    private void MethodSelected(API_METHODS obj)
    {
        CurrentMethod = obj;
        Response = "";
        UpdateRequest();
        StateHasChanged();
    }
    
    public async void UpdateRequest()
    {
        switch (CurrentMethod)
        {
            case API_METHODS.GeneratePackagesNumbers:
                var packagesNumbersV9 = new GeneratePackagesNumbersV9();
                packagesNumbersV9.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = packagesNumbersV9.CreateSoapEnvelope();
                break;
            case API_METHODS.GenerateSpedLabels:
                var spedLabelsV4 = new GenerateSpedLabelsV4();
                spedLabelsV4.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = spedLabelsV4.CreateSoapEnvelope();
                break;
            case API_METHODS.GenerateProtocol:
                var generateProtocolV2 = new GenerateProtocolV2();
                generateProtocolV2.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateProtocolV2.CreateSoapEnvelope();
                break;
            case API_METHODS.GenerateInternationalPackageNumbers:
                var generateInternationalPackageNumbers = new GenerateInternationalPackageNumbersV1();
                generateInternationalPackageNumbers.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = generateInternationalPackageNumbers.CreateSoapEnvelope();
                break;
            case API_METHODS.FindPostalCode:
                var findPostalCodeV1 = new FindPostalCodeV1();
                findPostalCodeV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = findPostalCodeV1.CreateSoapEnvelope();
                break;
            case API_METHODS.GetCourierOrderAvailability:
                var getCourierOrderAvailabilityV1 = new GetCourierOrderAvailabilityV1();
                getCourierOrderAvailabilityV1.UpdateAuthData(CurrentProfile.Login, CurrentProfile.Password, CurrentProfile.MasterFid);
                Request = getCourierOrderAvailabilityV1.CreateSoapEnvelope();
                break;
            default:
                Request = "Method currently not implemented";
                break; 
        }
        Request = XMLService.Prettify(Request);
        
        if(_requestEditor is not null) await _requestEditor.SetValue(Request);
    }

    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsRequest(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Request,
            Minimap = new EditorMinimapOptions(){Enabled = false},
            StickyScroll = new EditorStickyScrollOptions(){ScrollWithEditor = false, Enabled = true},
            ScrollBeyondLastLine = false,
            MouseWheelZoom = false,
            MouseWheelScrollSensitivity = 1,
            Scrollbar = new EditorScrollbarOptions(){AlwaysConsumeMouseWheel = false},
        };
    }
    
    private StandaloneEditorConstructionOptions EditorConstructionOptionsResponse(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "html",
            Value = Response,
            Minimap = new EditorMinimapOptions(){Enabled = false},
            StickyScroll = new EditorStickyScrollOptions(){ScrollWithEditor = false, Enabled = true},
            ScrollBeyondLastLine = false,
            MouseWheelZoom = false,
            MouseWheelScrollSensitivity = 1,
            Scrollbar = new EditorScrollbarOptions(){AlwaysConsumeMouseWheel = false},
        };
    }
    
    private async void RequestChanged()
    {
        if(Request != await _requestEditor.GetValue()) Request = await _requestEditor.GetValue();
        StateHasChanged();
    }

    private async void ResponseChanged()
    {
        if(Response != await _responseEditor.GetValue()) Response = await _responseEditor.GetValue();
        StateHasChanged();
    }
    
    // This method is called when parameters are set or updated
    protected override async void OnParametersSet()
    {
        await base.OnParametersSetAsync();
        if (Data.Update)
        {
            // Ensure editors are updated when Data changes
            if(_requestEditor is not null) await _requestEditor.SetValue(XMLService.Prettify(Request));
            if(_responseEditor is not null) await _responseEditor.SetValue(XMLService.Prettify(Response));
            if(WsdlAddress is null) WsdlAddress = CurrentProfile.WsdlAddress;
            if(Request.Length < 1) UpdateRequest();
            Data.Update = false;
        }
    }

}