@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject AppState AppState

<MudPopoverProvider/>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" DefaultScrollbar="false" Theme="new StandardTheme()"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>

    <MudThemeManagerButton OnClick="@(() => OpenThemeManager(true))" />
    <MudThemeManager Open="ThemeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />

    <MudAppBar Elevation="7">
        
        <MudGrid Justify="Justify.Center">
            <!-- Left Section -->
            <MudItem xs="5" Class="d-flex justify-start flex-grow-1 gap-4">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
                <MudPaper Class="py-1">
                    <MudText Class="mx-4"  Typo="Typo.h4" Style="white-space: nowrap"><b>DPD Toolbox</b></MudText>
                </MudPaper>
                @if (AppState.CurrentPage is not null)
                {
                    <MudIcon Icon="@Icons.Material.Filled.ArrowForwardIos" Class="mt-3"/>
                    <MudPaper Class="py-1" Style="align-content: center" >
                        <MudText Class="mx-2" Typo="Typo.h5" Style="text-wrap: nowrap">@AppState.CurrentPage</MudText>
                    </MudPaper>
                }
            </MudItem>

            <!-- Center Section -->
            <MudItem xs="2" Class="d-flex justify-center flex-grow-1 gap-4">
                
            </MudItem>

            <!-- Right Section -->
            <MudItem xs="5" Class="d-flex justify-end flex-grow-1 gap-4">
                
                <MudPaper Class="px-3 py-1">
                    <MudStack Row="true" Spacing="1">
                        <MudText Class="mx-2" Typo="Typo.h4" Style="max-width: 400px; overflow-wrap: break-word;white-space: nowrap;overflow: hidden;"><b>Profile: @AppState.CurrentProfile.ProfileName</b></MudText>
                    </MudStack>
                </MudPaper>

                <CascadingValue Value="AppState.Settings">
                    <ProfileMenu Parent="@this"/>
                </CascadingValue>
                
                <MudToggleIconButton Class="px-2" Toggled="_isDarkMode" ToggledChanged="ChangedTheme"
                                     Icon="@Icons.Material.Filled.LightMode" Color="Color.Primary"
                                     ToggledIcon="@Icons.Material.Filled.ModeNight" ToggledColor="Color.Default"
                                     title="Motyw strony" Variant="Variant.Filled" Size="Size.Large"/>

                <MudIconButton Class="px-2" Icon="@Icons.Material.Filled.Settings" Variant="Variant.Filled" Size="Size.Large" OnClick="@ToggleSettings"/>
            </MudItem>
        </MudGrid>
    </MudAppBar>
    
    <MudDrawer @bind-Open="@_openSettings" Anchor="Anchor.End" Elevation="1" Variant="DrawerVariant.Temporary" Width="300px">
        <Settings settings="AppState.Settings"/>
    </MudDrawer>

    <MudDrawer @bind-Open="@_open" ClipMode="DrawerClipMode.Docked" Variant="AppState.Settings.MiniDrawer?DrawerVariant.Mini:DrawerVariant.Responsive" Elevation="_themeManager.DrawerElevation">
        <NavMenu/>
        <MudIconButton Style="position: absolute; bottom: 1px; left: 2px" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Primary"
                       Size="Size.Large" aria-label="github" 
                       Href="https://github.com/Stefcio345/DPD_Tool"
                       Target="_blank" 
                       Class="pa-1 ma-1"/>
    </MudDrawer>
    
    <CascadingValue Value="AppState.CurrentProfile">
        <MudMainContent Class="pt-10 px-8 mt-5">
            @Body
        </MudMainContent>
    </CascadingValue>

</MudLayout>

@code{
    private bool _isDarkMode;
    private bool _open;
    private bool _openSettings;
    private MudThemeProvider _mudThemeProvider = new MudThemeProvider();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            
            //TODO Fix This
            await BlazorMonaco.Editor.Global.DefineTheme(JsRuntime, "Default", new StandaloneThemeData
                {
                    Inherit = true,
                    Base = "vs",
                    Colors = new Dictionary<string, string>
                    {
                        { "editor.background", "#2A2024" }
                    },
                }
            );
            
            await BlazorMonaco.Editor.Global.SetTheme(JsRuntime, _isDarkMode ? "vs-dark" : "Default");
            StateHasChanged();
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
    }
    
    protected override Task OnInitializedAsync()
    {
        AppState.OnChange += StateHasChanged;
        AppState.InitializeAppState();
        return base.OnInitializedAsync();
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }
    
    private void ToggleSettings(MouseEventArgs obj)
    {
        _openSettings = !_openSettings;
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool ThemeManagerOpen;

    void OpenThemeManager(bool value)
    {
        ThemeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    private async void ChangedTheme()
    {
        _isDarkMode = !_isDarkMode;
        //Set Editor theme
        _ = BlazorMonaco.Editor.Global.SetTheme(JsRuntime, _isDarkMode ? "vs-dark" : "Default");
        StateHasChanged();
    }

}