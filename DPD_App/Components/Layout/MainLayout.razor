@using System.ComponentModel
@using MudBlazor.Utilities
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject ISnackbar Snackbar
@inject AppState AppState

<MudPopoverProvider/>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" DefaultScrollbar="false" Theme="new StandardTheme()"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>

    <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
    
    <MudAppBar Elevation="7">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
        
        <MudPaper Class="mx-4 py-1">
            <MudText Class="mx-4" Typo="Typo.h4"><b>DPD App</b></MudText>
        </MudPaper>
        
        <MudSpacer />
        
        <MudPaper Class="px-3 py-1">
            <MudStack Row="true" Spacing="1">
                <CascadingValue Value="AppState.Settings">
                    <ProfileMenu/>
                </CascadingValue>

                <MudText Class="mx-2" Typo="Typo.h4">Current Profile: @AppState.CurrentProfile.ProfileName</MudText>
            </MudStack>
        </MudPaper>
        
        <MudSpacer />

        <MudStack Row="true">

            <MudToggleIconButton Toggled="_isDarkMode" ToggledChanged="ChangedTheme"
                                 Icon="@Icons.Material.Filled.LightMode" Color="Color.Primary"
                                 ToggledIcon="@Icons.Material.Filled.ModeNight" ToggledColor="Color.Default"
                                 title="Motyw strony" Variant="Variant.Filled" Size="Size.Large"/>

            <MudIconButton Icon="@Icons.Material.Filled.Settings" Variant="Variant.Filled" Size="Size.Large" OnClick="@ToggleSettings"/>
            
        </MudStack>

    </MudAppBar>

    <CascadingValue Value="AppState.Settings">
        <MudDrawer @bind-Open="@_openSettings" Anchor="Anchor.End" Elevation="1" Variant="DrawerVariant.Temporary">
            <Settings/>
        </MudDrawer>
    </CascadingValue>

    <MudDrawer @bind-Open="@_open" ClipMode="DrawerClipMode.Docked" Variant="AppState.Settings.MiniDrawer?DrawerVariant.Mini:DrawerVariant.Responsive" Elevation="_themeManager.DrawerElevation">
        <NavMenu/>
        <MudIconButton Style="position: absolute; bottom: 1px; left: 2px" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Primary"
                       Size="Size.Large" aria-label="github" 
                       Href="https://github.com/Stefcio345/DPD_Tool"
                       Target="_blank" 
                       Class="pa-1 ma-1"/>
    </MudDrawer>
    
    <CascadingValue Value="AppState.CurrentProfile">
        <MudMainContent Class="pt-20 px-8">
            @Body
        </MudMainContent>
    </CascadingValue>

</MudLayout>

@code{
    private bool _isDarkMode;
    private bool _open = false;
    private bool _openSettings = false;
    private MudThemeProvider _mudThemeProvider = new MudThemeProvider();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            
            //TODO Fix This
            BlazorMonaco.Editor.Global.DefineTheme(jsRuntime, "my_theme", new StandaloneThemeData
                {
                    Inherit = true,
                    Base = "vs",
                    Colors = new Dictionary<string, string>
                    {
                        { "background", "#594ae2" },
                        { "foreground", "#594ae2" }
                    }
                }
            );
            
            BlazorMonaco.Editor.Global.SetTheme(jsRuntime, _isDarkMode ? "vs-dark" : "my_theme");
            StateHasChanged();
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
    }
    
    protected override Task OnInitializedAsync()
    {
        AppState.OnChange += StateHasChanged;
        AppState.LoadProfile();
        AppState.LoadSettings();
        return base.OnInitializedAsync();
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }
    
    private void ToggleSettings(MouseEventArgs obj)
    {
        _openSettings = !_openSettings;
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    private void ChangedTheme()
    {
        _isDarkMode = !_isDarkMode;
        //Set Editor theme
        BlazorMonaco.Editor.Global.SetTheme(jsRuntime, _isDarkMode ? "vs-dark" : "my_theme");
        StateHasChanged();
    }

}