

<MudDrawerHeader>
    <MudText Typo="Typo.h4">Settings</MudText>
</MudDrawerHeader>

<MudStack Class="mx-4">

    <!-- General settings -->
    <MudPaper Class="pb-2">
        <MudStack>
            @if (_displayGeneral)
            {
            <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displayGeneral = !_displayGeneral" EndIcon="@Icons.Material.Filled.ArrowUpward">General</MudButton>
            }
            else
            {
            <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displayGeneral = !_displayGeneral" EndIcon="@Icons.Material.Filled.ArrowDownward">General</MudButton>
            }
        </MudStack>
        @if (_displayGeneral)
        {
            <MudSwitch Class="px-4" T="bool" Value="settings.MiniDrawer" ThumbIcon="@(settings.MiniDrawer == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.MiniDrawer == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.MiniDrawer = b; settings.SaveToFile(); StateHasChanged(); }">Mini Drawer</MudSwitch>
        }
    </MudPaper>
    
    <!-- Logging settings -->
    <MudPaper Class="pb-2">
        <MudStack>
            @if (_displayLogging)
            {
                <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displayLogging = !_displayLogging" EndIcon="@Icons.Material.Filled.ArrowUpward">Logging</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displayLogging = !_displayLogging" EndIcon="@Icons.Material.Filled.ArrowDownward">Logging</MudButton>
            }
        </MudStack>
        @if (_displayLogging)
        {
            <MudSwitch Class="mr-4" T="bool" Value="settings.LogRequests" ThumbIcon="@(settings.LogRequests == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.LogRequests == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.LogRequests = b; settings.SaveToFile(); StateHasChanged(); }">Log requests</MudSwitch>
            @if (settings.LogRequests)
            {
                <MudSwitch Class="mr-4" T="bool" Value="settings.ShortenLogs" ThumbIcon="@(settings.ShortenLogs == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.ShortenLogs == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.ShortenLogs = b; settings.SaveToFile(); StateHasChanged(); }">Shorten Logs</MudSwitch>
                @if (settings.ShortenLogs)
                {
                    <MudTextField Class="mx-2" T="int" Label="Max log length" Value="settings.MaxLogSize" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(b) => { settings.MaxLogSize = b; settings.SaveToFile(); StateHasChanged(); }"></MudTextField>
                }

                <MudSwitch Class="mr-4" T="bool" Value="settings.LogToConsole" ThumbIcon="@(settings.LogToConsole == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.LogToConsole == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.LogToConsole = b; settings.SaveToFile(); StateHasChanged(); }">Log to console</MudSwitch>
                <MudSwitch Class="mr-4" T="bool" Value="settings.LogToFile" ThumbIcon="@(settings.LogToFile == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.LogToFile == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.LogToFile = b; settings.SaveToFile(); StateHasChanged(); }">Log to file</MudSwitch>
                @if (settings.LogToFile)
                {
                    <MudTextField Class="mx-2" T="string" Label="Log Save location" Value="settings.LogSaveLocation" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(b) => { settings.LogSaveLocation = b; settings.SaveToFile(); StateHasChanged(); }"></MudTextField>
                }
            }
        }
    </MudPaper>

    <!-- SOAP API Settings -->
    <MudPaper Class="pb-2">
        <MudStack>
            @if (_displaySoapAPI)
            {
                <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displaySoapAPI = !_displaySoapAPI" EndIcon="@Icons.Material.Filled.ArrowUpward">Soap API</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displaySoapAPI = !_displaySoapAPI" EndIcon="@Icons.Material.Filled.ArrowDownward">Soap API</MudButton>
            }
        </MudStack>
        @if (_displaySoapAPI)
        {
            <MudTextField Class="mx-2" T="string" Label="SoapAPI save location" Value="settings.SoapDownloadLocation" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(b) => { settings.SoapDownloadLocation = b; settings.SaveToFile(); StateHasChanged(); }"></MudTextField>
            <MudSelect Class="mx-2" Dense="true" Clearable="true" T="SoapApiMethod?" Label="Default Soap Method" Placeholder="Method not selected" Value="settings.DefaultSoapMethod" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(b) => { settings.DefaultSoapMethod = b; settings.SaveToFile(); StateHasChanged(); }">
                @foreach (var method in SoapApiMethods.Methods)
                {
                    <MudSelectItem Value="@method">@method.Name</MudSelectItem>
                }
            </MudSelect>
        }
    </MudPaper>

    <!-- Generate Labels -->
    <MudPaper Class="pb-2">
        <MudStack>
            @if (_displayGenerateLabels)
            {
                <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displayGenerateLabels = !_displayGenerateLabels" EndIcon="@Icons.Material.Filled.ArrowUpward">Generate Labels</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Size="Size.Large" Class="mb-3" OnClick="() => _displayGenerateLabels = !_displayGenerateLabels" EndIcon="@Icons.Material.Filled.ArrowDownward">Generate Labels</MudButton>
            }
        </MudStack>

        @if (_displayGenerateLabels)
        {
            <MudPaper Elevation="0">
                <MudSwitch T="bool" Value="settings.SaveLabelsToFile" ThumbIcon="@(settings.SaveLabelsToFile == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.SaveLabelsToFile == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.SaveLabelsToFile = b; settings.SaveToFile(); StateHasChanged(); }">Save labels to file</MudSwitch>
                @if (settings.SaveLabelsToFile)
                {
                    <MudTextField Class="mx-2" T="string" Label="Labels Save Location" Value="settings.LabelSaveLocation" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(b) => { settings.LabelSaveLocation = b; settings.SaveToFile(); StateHasChanged(); }"></MudTextField>
                }
            </MudPaper>
            <MudPaper Elevation="0">
                <MudSwitch T="bool" Value="settings.SaveProtocolsToFile" ThumbIcon="@(settings.SaveProtocolsToFile == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.SaveProtocolsToFile == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.SaveProtocolsToFile = b; settings.SaveToFile(); StateHasChanged(); }">Save Protocols to file</MudSwitch>
                @if (settings.SaveProtocolsToFile)
                {
                    <MudTextField Class="mx-2" T="string" Label="Protocols Save Location" Value="settings.ProtocolSaveLocation" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(b) => { settings.ProtocolSaveLocation = b; settings.SaveToFile(); StateHasChanged(); }"></MudTextField>
                }
            </MudPaper>

            <MudPaper Elevation="0">
                <MudSwitch T="bool" Value="settings.AddressDetailsVertical" ThumbIcon="@(settings.AddressDetailsVertical == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.AddressDetailsVertical == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.AddressDetailsVertical = b; settings.SaveToFile(); StateHasChanged(); }">Sender/Receiver Details Vertical display</MudSwitch>
            </MudPaper>
            
            <MudPaper Elevation="0">
                <MudSwitch T="bool" Value="settings.ImpossibleServiceCombinationsEnabled" ThumbIcon="@(settings.ImpossibleServiceCombinationsEnabled == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(settings.ImpossibleServiceCombinationsEnabled == true ? Color.Success : Color.Error)" ValueChanged="(b) => { settings.ImpossibleServiceCombinationsEnabled = b; settings.SaveToFile(); StateHasChanged(); }">Impossible Services Combinations Enabled</MudSwitch>
            </MudPaper>
        }

        <MudTextField Class="mx-2" T="string" Label="Notes Save Location" Value="settings.NoteSaveLocation" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(b) => { settings.NoteSaveLocation = b; settings.SaveToFile(); StateHasChanged(); }"></MudTextField>

    </MudPaper>
</MudStack>

@code
{
    [CascadingParameter]
    public AppSettings settings { get; set; }

    private bool _displayGeneral = false;
    private bool _displaySoapAPI = false;
    private bool _displayLogging = false;
    private bool _displayGenerateLabels= false;
}
